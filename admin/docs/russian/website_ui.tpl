<div id="documentation">
	<h1 id="section_website_ui">Управление сайтом</h1>
	<h2 id="section_website_ui_contents">Содержание</h2>
	<div class="contents">
		<a href="#section_website_ui_basic" class="l2">Базовые понятия</a><br/>
		<a href="#section_website_ui_page_components" class="l2">Компоненты страниц</a><br/>
		<a href="#section_website_ui_page_components_usage" class="l3">Использование компонентов страниц на сайте</a><br/>
		<a href="#section_website_ui_page_components_admin_panel" class="l3">Работа с компонентами страниц в панели администрирования</a><br/>
		<a href="#section_website_ui_page_components_default" class="l3">Обзор компонентов страниц в дизайне по умолчанию</a><br/>
		<a href="#section_website_ui_blocks" class="l2">Блоки</a><br/>
		<a href="#section_website_ui_blocks_reference" class="l3">Общая информация о блоках</a><br/>
		<a href="#section_website_ui_blocks_usage" class="l3">Использование блоков на страницах сайта</a><br/>
		<a href="#section_website_ui_blocks_params" class="l3">Параметры конфигурации и шаблоны блоков</a><br/>
		<a href="#section_website_ui_blocks_pagination" class="l3">Блоки списков и пагинация</a><br/>
		<a href="#section_website_ui_blocks_global" class="l3">Глобальные блоки</a><br/>
		<a href="#section_website_ui_advertising" class="l2">Реклама и Рекламные споты</a><br/>
		<a href="#section_website_ui_advertising_usage" class="l3">Использование рекламных спотов на сайте</a><br/>
		<a href="#section_website_ui_advertising_admin_panel" class="l3">Работа с рекламой в панели администрирования</a><br/>
		<a href="#section_website_ui_pages" class="l2">Страницы сайта</a><br/>
		<a href="#section_website_ui_pages_reference" class="l3">Общая информация о страницах</a><br/>
		<a href="#section_website_ui_pages_admin_panel" class="l3">Работа со страницами в панели администрирования</a><br/>
		<a href="#section_website_ui_pages_existing" class="l3">Краткий обзор существующих страниц</a><br/>
		<a href="#section_website_ui_caching" class="l2">Кэширование</a><br/>
		<a href="#section_website_ui_caching_blocks" class="l3">Кэширование первого уровня</a><br/>
		<a href="#section_website_ui_caching_pages" class="l3">Кэширование второго уровня</a><br/>
		<a href="#section_website_ui_caching_important" class="l3">Важные аспекты кэширования</a><br/>
		<a href="#section_website_ui_caching_performance" class="l3">Статистика производительности</a><br/>
		<a href="#section_website_ui_other" class="l2">Другие аспекты работы с сайтом</a><br/>
		<a href="#section_website_ui_other_js" class="l3">JavaScript файлы</a><br/>
		<a href="#section_website_ui_other_emails" class="l3">Системные email сообщения</a><br/>
		<a href="#section_website_ui_other_session" class="l3">Информация в сессии пользователя</a><br/>
		<a href="#section_website_ui_other_engine_customization" class="l3">Подключение кастомного функционала к движку</a><br/>
		<a href="#section_website_ui_other_engine_custom_blocks" class="l3">Создание кастомных блоков сайта</a><br/>
		<a href="#section_website_ui_other_debugger" class="l3">Отладка страниц сайта</a><br/>
	</div>
	<h2 id="section_website_ui_basic">Базовые понятия</h2>
	<!-- ch_website_ui_basic(start) -->
	<div>
		<p>
			KVS предоставляет движок с огромным спектром возможностей по созданию и настройке страниц
			сайта. Основные достоинства движка перечислены ниже:
		</p>
		<ul>
			<li>
				Беспрецендентная скорость работы достигается за счет двух-уровневого кэширования содержимого страниц.
				Стратегия кэширования может быть изменена в любой момент времени, что позволяет снять нагрузку на
				сервер при увеличении трафика. Существует несколько важных аспектов кэширования, которые обязательно
				необходимо прочитать и понять, прежде чем работать с настройкой сайта. Они будут описаны в разделе о
				кэшировании.
			</li>
			<li>
				Построение страниц сайта на основе блоков позволяет быстро настроить необходимый функционал каждой
				страницы. Это сможет сделать любой человек, знающий основы верстки и понимающий концепцию движка Kernel
				Video Sharing.
			</li>
			<li>
				При необходимости расширения базового функционала, вы можете написать свои собственные блоки и
				использовать их на сайте. Для этого не нужно разбираться с тысячами строк кода, достаточно лишь понять
				несколько базовых правил создания блоков.
			</li>
			<li>
				Любые новые блоки, разработанные позднее, могут быть подключены в любое место сайта без вероятности
				повредить существующий и работающий функционал.
			</li>
			<li>
				Встроенный анализ производительности сайта позволяет находить наиболее уязвимые с точки зрения
				производительности страницы и блоки сайта и оптимизировать их на лету.
			</li>
		</ul>
		<p>
			Движок KVS использует 4 сущности для построения сайта:
		</p>
		<ul>
			<li>
				<span class="term">Компоненты страниц</span> - это части верстки, которые могут использоваться во
				многих местах. Компоненты страниц просто отображают HTML код, следуя логики, которая задается в
				шаблоне компонента. Это применяется для общих элементов сайта (например, шапка, нижняя часть, форма
				поиска, которая может отображаться на многих страницах и т.д.). Компоненты используются в шаблонах
				других сущностей, например на страницах и в блоках. Таким образом, если вам нужно поменять что-либо в
				шапке сайта (обычно это название проекта и верстка шапки), это можно поменять в соответствующем
				компоненте страниц, и изменения подействуют для всех страниц, которые используют данный компонент в
				своем шаблоне.
			</li>
			<li>
				<span class="term">Блоки</span> - это основные логические модули страниц. Каждый блок предоставляет
				логически завершенный кусочек функционала сайта и может использоваться на любых страницах. Основное
				отличие блоков от компонентов страниц заключается в том, что блоки предоставляют выполнение бизнес
				логики (работа с базой данных, подготовка результатов для отображения, обработка форм, отправленных
				пользователями) и отображение результатов выполнения данной бизнес логики (шаблон с версткой), в то
				время как компоненты страниц содержат только отображение каких-либо данных или элементов дизайна.
				Большинство блоков поддерживает набор конфигурационных параметров, которыми можно управлять поведением
				блока (например, ограничить кол-во элементов в блоке списка, или включить визуальную защиту при входе в
				личную зону). Каждый блок кроме параметров поддерживает определенный уровень кэширования и может
				кэшироваться отдельно.
			</li>
			<li>
				<span class="term">Рекламные споты</span> - это споты для отображения рекламы. Вы можете настроить
				сколько угодно рекламных спотов на сайте и привязать к каждому из них рекламу.
			</li>
			<li>
				<span class="term">Страницы</span> - это основные элементы структуры сайта, каждая страница может
				содержать любое кол-во компонентов, блоков и рекламных спотов (или может просто содержать статический
				HTML код). Страницы поддерживают кэширование второго уровня, при включении которого результат
				отображения страницы полностью помещается в оперативную память и в течение настроенного интервала
				времени пользователи видят сохраненный в кэше HTML код (статику).
			</li>
			<li>
				<span class="term">Группы страниц</span> - возможность разбивать страницы на группы для удобства работы
				в панели администрирования.
			</li>
		</ul>
		<div class="screenshot">
			<img src="docs/screenshots/website_ui_page_structure.png" alt="Структура страницы сайта" width="981" height="714"/><br/>
			<span>Структура страницы сайта.</span>
		</div>
		<p>
			Для того, чтобы наглядно представить себе все основные сущности сайта, рассмотрим скриншот выше. Все что
			отображается на скриншоте - это отдельная страница, которая доступна по отдельному адресу. В самом верху
			страницы находится шапка. Шапка - это компонент страниц, поскольку она не несет в себе никакой логики,
			только выводит верхнюю часть HTML кода страницы. В шапке вставлен рекламный спот, в котором отображается
			один баннер. Если к этому рекламному споту привязать несколько баннеров, то они будут ротироваться. Ниже
			шапки отображается блок списка видео (<b>list_videos</b>), который выводит 9 последних просмотренных видео.
			Чем отличается блок от компонента страниц очевидно - блок обращается в базу данных для того, чтобы вывести
			некоторую информацию, а компонент страниц просто отображает HTML код. Справа от блока списка видео
			отображается компонент страниц с формой поиска видео и под ним блок облака тэгов (<b>tags_cloud</b>).
		</p>
		<p>
			В качестве другого примера рассмотрим страницу Community, на которой мы хотим отобразить такую информацию:
		</p>
		<ul>
			<li>3 рекомендуемых к просмотру премиум видео</li>
			<li>20 последних зарегистрированных пользователей сайта</li>
			<li>3 наиболее активных пользователя</li>
			<li>10 последних добавленных фотоальбомов</li>
			<li>10 самых популярных фотоальбомов</li>
		</ul>
		<p>
			Код шаблона страницы будет иметь приблизительно такой вид:
		</p>
		<p class="code">
			<span class="comment">
				{{$smarty.ldelim}}* Устанавливаем значение переменной page_title, которая используется в компоненте страниц header_general *{{$smarty.rdelim}}<br/>
			</span>
			{{$smarty.ldelim}}assign var=page_title value="Community"{{$smarty.rdelim}}<br/>
			<br/>
			<span class="comment">
				{{$smarty.ldelim}}* Подключаем компонент страниц header_general, который отображает шапку страницы *{{$smarty.rdelim}}<br/>
			</span>
			{{$smarty.ldelim}}include file="header_general.tpl"{{$smarty.rdelim}}<br/>
			<br/>
			&lt;div id="data"&gt;<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id="wide_col"&gt;<br/>
			<span class="comment">
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}* Подключаем блок list_videos для отображения 3 премиум видео *{{$smarty.rdelim}}<br/>
			</span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}insert name="getBlock" block_id="list_videos" block_name="Recommended premium videos"{{$smarty.rdelim}}<br/>
			<br/>
			<span class="comment">
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}* Подключаем блок list_members для отображения 20 последних пользователей *{{$smarty.rdelim}}<br/>
			</span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}insert name="getBlock" block_id="list_members" block_name="Latest members"{{$smarty.rdelim}}<br/>
			<br/>
			<span class="comment">
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}* Подключаем блок list_albums для отображения 10 последних фотоальбомов *{{$smarty.rdelim}}<br/>
			</span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}insert name="getBlock" block_id="list_albums" block_name="Latest albums"{{$smarty.rdelim}}<br/>
			<br/>
			<span class="comment">
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}* Подключаем блок list_albums для отображения 10 популярных фотоальбомов *{{$smarty.rdelim}}<br/>
			</span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}insert name="getBlock" block_id="list_albums" block_name="Most popular albums"{{$smarty.rdelim}}<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id="side_col"&gt;<br/>
			<span class="comment">
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}* Подключаем блок list_members для отображения 3 активных пользователей *{{$smarty.rdelim}}<br/>
			</span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}insert name="getBlock" block_id="list_members" block_name="Active members"{{$smarty.rdelim}}<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br/>
			&lt;/div&gt;<br/>
			<br/>
			<span class="comment">
				{{$smarty.ldelim}}* Подключаем компонент страниц footer_general, который отображает нижнюю часть страницы *{{$smarty.rdelim}}<br/>
			</span>
			{{$smarty.ldelim}}include file="footer_general.tpl"{{$smarty.rdelim}}
		</p>
		<p>
			Кроме непосредственного подключения блоков в шаблоне страницы необходимо также настроить их параметры для
			данной страницы (например, блоку <b>list_videos</b> указать, что нужно выводить только 3 видео и
			обязательно премиум и т.д.) и при необходимости шаблоны блоков для данной страницы (логику отображения
			данных). Это будет детально рассмотрено в следующих разделах.
		</p>
	</div>
	<!-- ch_website_ui_basic(end) -->
	<h2 id="section_website_ui_page_components">Компоненты страниц</h2>
	<!-- ch_website_ui_page_components_usage(start) -->
	<div>
		<h3 id="section_website_ui_page_components_usage">Использование компонентов страниц на сайте</h3>
		<p>
			Компоненты страниц представляют собой используемые во многих местах элементы и компоненты верстки сайта.
			Поскольку страниц сайта может быть очень много и большинство из них будет иметь схожие элементы дизайна
			(например, шапка, блок поиска, и др.), то для простоты и удобства использования такие элементы дизайна
			рекомендуется выносить в компоненты страниц, которые затем использовать в нужных местах.
		</p>
		<p>
			Компоненты страниц могут использоваться в любых местах, где ожидается шаблон Smarty (в шаблонах страниц,
			шаблонах блоков и даже в шаблонах самих компонентов). Для подключения компонента используется стандартная
			директива Smarty:
		</p>
		<p class="code">
			{{$smarty.ldelim}}include file="%PAGE_COMPONENT_EXTERNAL_ID%.tpl"{{$smarty.rdelim}}
		</p>
		<p>
			В данном примере токен <b>%PAGE_COMPONENT_EXTERNAL_ID%</b> должен быть заменен на
			<span class="term">идентификатор</span> требуемого компонента, например <b>header_general</b>:
		</p>
		<p class="code">
			{{$smarty.ldelim}}include file="header_general.tpl"{{$smarty.rdelim}}
		</p>
		<p>
			Во время обработки страницы данная директива будет заменена движком Smarty на содержимое шаблона указанного
			компонента. Это позволяет использовать любые переменные в шаблоне компонента страниц, значения которых
			могут быть установлены в месте непосредственного использования компонента. Для примера, рассмотрим шапку
			сайта, которая содержит информацию о названии страницы. Шапка не может содержать конкретное название
			страницы, поскольку она используется на разных страницах сайта с разными названиями. Поэтому вместо
			конкреного названия следует использовать переменную (например, <b>page_title</b>), значение которой будет
			устанавливаться в шаблоне конкретной страницы непосредственно перед подключением компонента шапки на
			страницу. Код шаблона компонента шапки может выглядеть так:
		</p>
		<p class="code">
			&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;<br/>
			&lt;head&gt;<br/>
			<span class="comment">
				&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- Выводим значение переменной page_title в названии страницы --&gt;<br/>
			</span>
			&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;{{$smarty.ldelim}}$page_title{{$smarty.rdelim}} - My Tube Site&lt;/title&gt;<br/>
			&lt;/head&gt;<br/>
			&lt;body&gt;<br/>
		</p>
		<p>
			Для того, чтобы при отображении страницы переменная <b>page_title</b> заменилась на нужное значение,
			необходимо присвоить ей это значение перед подключением компонента. Это может быть сделано таким образом
			(страница со списком премиум видео):
		</p>
		<p class="code">
			<span class="comment">
				{{$smarty.ldelim}}* Устанавливаем значение переменной page_title *{{$smarty.rdelim}}<br/>
			</span>
			{{$smarty.ldelim}}assign var=page_title value="Premium Videos"{{$smarty.rdelim}}<br/>
			<br/>
			<span class="comment">
				{{$smarty.ldelim}}* Подключаем компонент страниц header_general, который отображает шапку страницы *{{$smarty.rdelim}}<br/>
			</span>
			{{$smarty.ldelim}}include file="header_general.tpl"{{$smarty.rdelim}}<br/>
			<br/>
			....
		</p>
	</div>
	<!-- ch_website_ui_page_components_usage(end) -->
	<!-- ch_website_ui_page_components_admin_panel(start) -->
	<div>
		<h3 id="section_website_ui_page_components_admin_panel">Работа с компонентами страниц в панели администрирования</h3>
		<p>
			Файлы компонентов страниц хранятся в директории <b>/template</b> в корне проекта. Для создания компонентов
			Apache должен иметь права на создание файлов в данной директории. Для редактирования какого-либо компонента
			Apache должен иметь права на редактирование файла шаблона данного компонента.
		</p>
		<p>
			Для создания компонента страниц вы можете воспользоваться любым из 3 способов:
		</p>
		<ul>
			<li>
				Создать компонент вручную в панели администрирования, указав его идентификатор и код шаблона.
			</li>
			<li>
				Сделать дубликат уже существующего компонента. Для этого вы можете воспользоваться опцией
				<span class="term">Сделать копию</span> в контекстном меню исходного компонента в панели
				администрирования. Вам необходимо ввести только название идентификатора нового компонента.
			</li>
			<li>
				Скопировать файл с расширением <b>.tpl</b> в директорию <b>/template</b> в корне проекта. И установить
				на него привилегии 666.
			</li>
		</ul>
		<p>
			Поля данных, которые поддерживаются компонентами:
		</p>
		<ul>
			<li>
				<span class="term">Идентификатор</span> - уникальный идентификатор компонента, может содержать
				ограниченный набор символов (a-z, A-Z, 0-9, _). Данный идентификатор используется для сохранения кода
				шаблона компонента на сервере в файле с расширением <b>.tpl</b>. Идентификатор не может быть изменен
				после создания компонента. Если возникла необходимость переименовать компонент, то следует сделать его
				копию, затем переключиться на компонент с новым идентификатором во всех местах, где использовался
				старый, после этого появится возможность удалить старый компонент.
			</li>
			<li>
				<span class="term">Код шаблона</span> - код шаблона Smarty (или просто HTML код) для данного
				компонента. В шаблоне компонента страниц не допускается подключать какие-либо блоки - блоки могут быть
				подключены только в шаблонах страниц.
			</li>
		</ul>
		<p>
			Во время работы с содержимым страниц и блоков вы можете подключать даже несуществующие компоненты
			страниц (через директиву Smarty <b>{{$smarty.ldelim}}include ...{{$smarty.rdelim}}</b>). В этом случае необходимый компонент будет создан
			автоматически с пустым шаблоном. Все что вам нужно будет сделать - это просто задать для него шаблон позже.
		</p>
		<p>
			Удаление компонентов страниц допускается только при отсутствии ссылок на них в других сущностях сайта
			(страницах, блоках или других компонентах).
		</p>
	</div>
	<!-- ch_website_ui_page_components_admin_panel(end) -->
	<!-- ch_website_ui_page_components_default(start) -->
	<div>
		<h3 id="section_website_ui_page_components_default">Обзор компонентов страниц в дизайне по умолчанию</h3>
		<p>
			Данная таблица содержит краткое описание и предназначение компонентов страниц, которые используются в
			дизайне по умолчанию. Часть из приведенных ниже компонентов недоступна в младших пакетах функциональности.
		</p>
		<p>
			Многие компоненты поддерживают так называемые "внешние переменные". Что это значит? Если компонент имеет
			несколько вариаций, которые отличаются небольшими фрагментами (например, названия списков видео разные, но
			сами списки видео отображаются одинаково), то нет смысла делать по одному компоненту для каждого списка
			видео со своим названием. Достаточно сделать один компонент, но вместо названия списка вывести значение из
			переменной, которое будет устанавливаться перед подключением компонента. Например, компонент шапки
			поддерживает внешнюю переменную для HTML названия страницы:
		</p>
		<p class="code">
			&lt;title&gt;{{$smarty.ldelim}}$page_title{{$smarty.rdelim}} / Kernel Tube&lt;/title&gt;
		</p>
		<p>
			Перед подключением компонента шапки необходимо установить значение этой переменной, которое должно быть
			выведено внутри компонента:
		</p>
		<p class="code">
			{{$smarty.ldelim}}assign var="page_title" value="Community"{{$smarty.rdelim}}<br/>
			{{$smarty.ldelim}}include file="header_general.tpl"{{$smarty.rdelim}}
		</p>
		<div class="table">
			<table>
				<colgroup>
					<col width="10%"/>
					<col/>
				</colgroup>
				<tr class="header">
					<td>Имя файла</td>
					<td>Описание</td>
				</tr>
				<tr>
					<td>header_general.tpl</td>
					<td>
						Шапка сайта, поддерживает следующие внешние переменные:<br/>
						- <b>page_title</b> - название страницы.<br/>
						- <b>page_description</b> - описание страницы. Если переменная не задана, то выводится базовое
						описание (необходимо изменить его).<br/>
						- <b>page_keywords</b> - тэги страницы. Если переменная не задана, то выводятся базовые тэги
						(необходимо изменить их).<br/>
						- <b>page_rss</b> - RSS канал для текущей страницы. Если переменная не задана, то будет
						использоваться RSS канал по умолчанию.<br/>
						- <b>page_canonical</b> - канонический URL для данной страницы. Используется для
						SE-оптимизации, если одинаковые страницы отображаются под разными URL-ами. В этом случае они
						должны указывать одинаковый канонический URL.<br/>
					</td>
				</tr>
				<tr>
					<td>footer_general.tpl</td>
					<td>Нижняя часть сайта.</td>
				</tr>
				<tr>
					<td>list_albums_block_common.tpl</td>
					<td>
						Отображение списка фотоальбомов на основных страницах сайта. Используется в шаблонах блока
						<b>list_albums</b>. Поддерживает такие внешние переменные:<br/>
						- <b>list_albums_title</b> - название списка.<br/>
						- <b>list_albums_show_all_link</b> - ссылка на страницу просмотра всех фотоальбомов, если
						данный список отображает только часть из них без пагинации.<br/>
						- <b>list_albums_show_rating</b> - одно из значений [1,2,3,4], показывает текущую сортировку по
						рейтингу [сегодня, неделя, месяц, все время].<br/>
						- <b>list_albums_show_popularity</b> - одно из значений [1,2,3,4], показывает текущую
						сортировку по популярности [сегодня, неделя, месяц, все время].
					</td>
				</tr>
				<tr>
					<td>list_albums_block_internal.tpl</td>
					<td>
						Отображение списка фотоальбомов на личных страницах сайта с возможностью опций удаления и
						редактирования. Используется в шаблонах блока <b>list_albums</b>. Поддерживает внешнюю
						переменную <b>list_albums_title</b> - название списка.
					</td>
				</tr>
				<tr>
					<td>list_members_block_common.tpl</td>
					<td>
						Отображение списка пользователей на основных страницах сайта. Используется в шаблонах блока
						<b>list_members</b>. Поддерживает такие внешние переменные:<br/>
						- <b>list_members_title</b> - название списка.<br/>
						- <b>list_members_show_all_link</b> - ссылка на страницу просмотра всех пользователей, если
						данный список отображает только часть из них без пагинации.
					</td>
				</tr>
				<tr>
					<td>list_members_events_block_common.tpl</td>
					<td>
						Отображение списка событий пользователей на основных страницах сайта. Используется в шаблонах
						блока <b>list_members_events</b>. Поддерживает такие внешние переменные:<br/>
						- <b>list_members_events_title</b> - название списка.<br/>
						- <b>list_members_events_show_all_link</b> - ссылка на страницу просмотра всех событий, если
						данный список отображает только часть из них без пагинации.
					</td>
				</tr>
				<tr>
					<td>list_members_blog_block_common.tpl</td>
					<td>
						Отображение списка сообщений блога пользователя на основных страницах сайта. Используется в
						шаблонах блока <b>list_members_blog</b>. Поддерживает такие внешние переменные:<br/>
						- <b>list_members_blog_title</b> - название списка.<br/>
						- <b>list_members_blog_show_all_link</b> - ссылка на страницу просмотра всех сообщений
						блога, если данный список отображает только часть из них без пагинации.<br/>
						- <b>list_members_blog_disable_edit</b> - устанавливается в 1, если шаблон не должен
						предоставлять возможность редактирования.
					</td>
				</tr>
				<tr>
					<td>list_videos_block_common.tpl</td>
					<td>
						Отображение списка видео на основных страницах сайта. Используется в шаблонах блока
						<b>list_videos</b>. Поддерживает такие внешние переменные:<br/>
						- <b>list_videos_title</b> - название списка.<br/>
						- <b>list_videos_show_all_link</b> - ссылка на страницу просмотра всех видео, если данный
						список отображает только часть из них без пагинации.<br/>
						- <b>list_videos_show_rating</b> - одно из значений [1,2,3,4], показывает текущую сортировку по
						рейтингу [сегодня, неделя, месяц, все время].<br/>
						- <b>list_videos_show_popularity</b> - одно из значений [1,2,3,4], показывает текущую
						сортировку по популярности [сегодня, неделя, месяц, все время].<br/>
						- <b>list_videos_show_sorting</b> - одно из значений [1,2,3,4], показывает текущую
						сортировку по разным показателям [дата появления, рейтинг, популярность, длительность].<br/>
						- <b>list_videos_show_sorting_link</b> - используется совместно с
						<b>list_videos_show_sorting</b> для указания части сгенеренных ссылок сортировки.
					</td>
				</tr>
				<tr>
					<td>list_videos_block_internal.tpl</td>
					<td>
						Отображение списка видео на личных страницах сайта с возможностью опций удаления и
						редактирования. Используется в шаблонах блока <b>list_videos</b>. Поддерживает внешнюю
						переменную <b>list_videos_title</b> - название списка.
					</td>
				</tr>
				<tr>
					<td>member_menu.tpl</td>
					<td>
						Меню со ссылками на различные внутренние страницы сайта для зарегистрированных пользователей.
					</td>
				</tr>
				<tr>
					<td>pagination_block_common.tpl</td>
					<td>
						Отображение пагинации для любого блока листинга. Используется в шаблонах блока
						<b>pagination</b> и шаблонах любых блоков списка.
					</td>
				</tr>
				<tr>
					<td>pagination_block_ajax.tpl</td>
					<td>
						Отображение аяксовой пагинации для любого блока листинга. Используется в шаблонах блока
						<b>pagination</b> и шаблонах любых блоков списка.
					</td>
				</tr>
				<tr>
					<td>search_albums_block.tpl</td>
					<td>Форма поиска по фотоальбомам.</td>
				</tr>
				<tr>
					<td>search_members_block.tpl</td>
					<td>Форма поиска по пользователям.</td>
				</tr>
				<tr>
					<td>search_videos_block.tpl</td>
					<td>Форма поиска по видео.</td>
				</tr>
				<tr>
					<td>side_advertising.tpl</td>
					<td>Блок боковой рекламы для демонстрации.</td>
				</tr>
				<tr>
					<td>tags_cloud_block_albums.tpl</td>
					<td>Отображение облака тэгов по фотоальбомам. Используется в шаблонах блока <b>tags_cloud</b>.</td>
				</tr>
				<tr>
					<td>tags_cloud_block_common.tpl</td>
					<td>Отображение облака тэгов по видео. Используется в шаблонах блока <b>tags_cloud</b>.</td>
				</tr>
			</table>
		</div>
	</div>
	<!-- ch_website_ui_page_components_default(end) -->
	<h2 id="section_website_ui_blocks">Блоки</h2>
	<!-- ch_website_ui_blocks_reference(start) -->
	<div>
		<h3 id="section_website_ui_blocks_reference">Общая информация о блоках</h3>
		<p>
			Блоки являются основными логическими модулями страниц. В отличие от компонентов страниц блоки предоставляют
			логику выборки / сохранения данных, а также большой спектр параметров конфигурации данной логики.
			Функциональность движка позволяет в любой момент времени изменить логику работы сайта путем изменения
			значений параметров блоков, а также добавления новых блоков на страницы и написания своих собственных
			блоков.
		</p>
		<p>
			Список всех блоков и полную информацию о них с примерами использования можно посмотреть на странице
			<span class="term">Обзор блоков</span> в разделе <span class="term">UI сайта</span> панели
			администрирования. При открытии подробных данных о блоке можно получить информацию по его использованию,
			список и описание всех параметров блока, а также различные примеры конфигурации блока.
		</p>
		<p>
			Блоки могут быть условно классифицированы по нескольким признакам. Например, по типу отображаемого контента
			блоки можно разделить на:
		</p>
		<ul>
			<li>
				<span class="term">Блоки листинга</span> - блоки, которые отображают список каких-либо сущностей,
				например <b>list_categories</b> - отображает список категорий, <b>video_comments</b> - отображает
				список комментариев к видео, и т.д. Данные блоки выделяются тем, что они все поддерживают пагинацию
				(переход по страницам листинга) внутри блока, а также к ним можно подключать сторонний блок пагинации
				(для сохранения преемственности со старыми версиями софта).
			</li>
			<li>
				<span class="term">Блоки отображения данных</span> - блоки, которые отображают данные какой-либо
				сущности, например, <b>member_profile_view</b> - отображает данные профиля пользователя,
				<b>album_view</b> - отображает данные фотоальбома и т.д.
			</li>
			<li>
				<span class="term">Блоки редактирования данных / форм</span> - блоки, которые отображают форму для
				заполнения, например, <b>logon</b> - отображает форму входа в личную зону, <b>video_edit</b> -
				отображает форму создания / редактирования видео и т.д. Особенностью этих блоков является то, что они
				не поддерживают кэширование.
			</li>
		</ul>
		<p>
			По уровню доступа блоки условно могут быть разделены на следующие группы:
		</p>
		<ul>
			<li>
				<span class="term">Блоки публичного доступа</span> - блоки доступные всем посетителям сайта при любых
				условиях, например, <b>list_categories</b> - отображает список категорий, <b>invite_friend</b> -
				отображает форму приглашения друга и т.д.
			</li>
			<li>
				<span class="term">Блоки приватного доступа</span> - блоки, которые при любых условиях требуют, чтобы
				пользователь был залогинен, например, <b>member_profile_edit</b> - отображает формы управления данными
				профиля, <b>list_messages</b> - отображает список сообщений внутренней почты и т.д. В случае запроса
				незалогиненным пользователем страницы с данным блоком, пользователь будет перенаправлен на страницу
				логина (конфигурируется через параметр блока), а затем после логина он вернется на запрошенную ранее
				страницу с приватным блоком.
			</li>
			<li>
				<span class="term">Блоки комбинированного доступа</span> - блоки, которые могут быть как публичными,
				так и приватными в зависимости от параметров их конфигурации, например, <b>list_videos</b> при
				отображении закладок видео текущего пользователя является приватным блоком, а при отображении списка
				премиум видео - публичным.
			</li>
		</ul>
		<p>
			Переменные с данными блока доступны только в самом шаблоне блока и недоступны извне. Если вам необходимо
			вывести какие-либо данные блока в шаблоне страницы, вам необходимо использовать глобальное хранилище,
			которое называется <b>$storage</b>. Почти все блоки использует глобальное хранилище данных на странице для
			сохранения туда некоторых результатов своей работы, чтобы они могли быть использованы на странице (снаружи
			блока). В шаблоне каждой страницы доступна глобальная переменная <b>$storage</b>, которая может
			использоваться для доступа к результатам блока (например, блок <b>video_view</b> помещает в глобальное
			хранилище некоторую информацию о видео, которое он отображает, например, название, описание, тэги и др.
		</p>
		<p class="important">
			<b>Важно!</b> Переменная <b>$storage</b> блока доступна только после места подключения блока в страницу.
		</p>
		<p>
			Как узнать какие данные блока доступны для использования в шаблоне блока или на странице через его
			глобальное хранилище <b>$storage</b>? Для этого существует отладчик страниц, более подробную информацию
			вы найдете далее в руководстве.
		</p>
	</div>
	<!-- ch_website_ui_blocks_reference(end) -->
	<!-- ch_website_ui_blocks_usage(start) -->
	<div>
		<h3 id="section_website_ui_blocks_usage">Использование блоков на страницах сайта</h3>
		<p>
			Для подключения блока на странице необходимо использовать следующий синтаксис в коде шаблона страницы:
		</p>
		<p class="code">
			{{$smarty.ldelim}}insert name="getBlock" block_id="%BLOCK_ID%" block_name="%UNIQUE_BLOCK_NAME%"{{$smarty.rdelim}}
		</p>
		<p>
			В данном примере токен <b>%BLOCK_ID%</b> должен быть заменен на
			<span class="term">идентификатор блока (block ID)</span> требуемого блока, например, <b>list_videos</b>, а
			токен <b>%UNIQUE_BLOCK_NAME%</b> на любое уникальное имя блока для данной страницы:
		</p>
		<p class="code">
			{{$smarty.ldelim}}insert name="getBlock" block_id="list_videos" block_name="Most Popular Videos"{{$smarty.rdelim}}
		</p>
		<p class="important">
			<b>Важно!</b> При изменении названия блока произойдет удаление блока со старым названием и добавление
			блока с новым названием, а это значит что старые настройки блока на этой странице не сохранятся. Старайтесь
			сразу давать блокам актуальные названия.
		</p>
		<p>
			Вы можете подключать любое количество блоков любых типов на одной странице, главное чтобы названия блоков
			были уникальны в контексте страницы:
		</p>
		<p class="code">
			<span class="comment">{{$smarty.ldelim}}* Первый блок list_videos *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}insert name="getBlock" block_id="list_videos" block_name="Most Popular Videos"{{$smarty.rdelim}}<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Еще один блок list_videos *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}insert name="getBlock" block_id="list_videos" block_name="Top Rated Videos"{{$smarty.rdelim}}<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Третий блок list_videos *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}insert name="getBlock" block_id="list_videos" block_name="Premium Videos"{{$smarty.rdelim}}<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Список трейдеров *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}insert name="getBlock" block_id="top_referers" block_name="Traders Text Links"{{$smarty.rdelim}}<br/><br/>
			...
		</p>
		<p>
			При простом подключении блока на странице он будет вызываться и отображать результат непосредственно в том
			месте шаблона страницы, где вы его вставили. В некоторых случаях необходимо заставить блок выполниться в
			начале страницы, например, для того, чтобы показать данные из хранилища <b>$storage</b> блока в заголовке
			страницы (title, description, keywords). Этого можно добиться, используя дополнительный параметр
			<b>assign</b> директивы <b>{{$smarty.ldelim}}insert ...{{$smarty.rdelim}}</b>. При использовании этого параметра результат выполнения блока
			будет не отображаться в текущем месте шаблона страницы, а помещаться в переменную, указанную в значении
			параметра <b>assign</b>. Этот результат выполнения можно будет вывести в любом месте страницы, используя
			стандартный вывод Smarty:
		</p>
		<p class="code">
			<span class="comment">{{$smarty.ldelim}}* Вызов блока просмотра видео в самом начале страницы и присвоение результата в переменную video_view_result *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}insert name="getBlock" block_id="video_view" block_name="View Video" <b>assign="video_view_result"</b>{{$smarty.rdelim}}<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Дальше идет много всего, например использование $storage блока video_view *{{$smarty.rdelim}}</span><br/>
			...<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Теперь нужно вывести результат блока просмотра видео *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}<b>$video_view_result</b>|smarty:nodefaults{{$smarty.rdelim}}<br/><br/>

			...
		</p>
		<p>
			Этого достаточно, чтобы показать название видео в заголовке страницы, т.к. после отработки блока можно
			использовать данные из его глобального хранилища <b>storage</b>:
		</p>
		<p class="code">
			<span class="comment">{{$smarty.ldelim}}* Вызов блока просмотра видео в самом начале страницы и присвоение результата в переменную video_view_result *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}insert name="getBlock" block_id="video_view" block_name="View Video" <b>assign="video_view_result"</b>{{$smarty.rdelim}}<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Присваиваем переменной page_title название видео доступное в глобальном хранилище *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}assign var="page_title" value=<b>$storage.video_view_video_view.title</b>{{$smarty.rdelim}}<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Подключаем компонент шапки, который отобразит значение из переменной page_title *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}include file="header_general.tpl"{{$smarty.rdelim}}<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Теперь нужно вывести результат блока просмотра видео *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}<b>$video_view_result</b>|smarty:nodefaults{{$smarty.rdelim}}<br/><br/>

			...
		</p>
		<p>
			Как видно из примера, каждый блок использует глобальное хранилище данных под своим уникальным ключем (в
			примере это <b>$storage.video_view_video_view</b>). Нет никакого смысла понимать механизм формирования
			этих ключей, поскольку панель администрирования выводит эти ключи для каждого блока в таблице блоков данной
			страницы сайта. При необходимости использовать глобальное хранилище - ключ можно скопировать из таблицы.
			Вы также можете воспользоваться отладчиком страницы, чтобы увидеть какие данные доступны для использования
			в хранилище <b>$storage</b> блока (см. главу про отладку страниц сайта).
		</p>
		<p>
			Для удаления блока со страницы достаточно удалить из кода шаблона страницы директиву, которая его
			вставляет. При этом файлы блока на самом деле удаляться не будут. Это сделано для того, чтобы можно было
			быстро восстановить блок на странице в случае его ошибочного удаления. Если вы вставите снова директиву
			подключения блока с такими же параметрами (имеются ввиду параметры директивы <b>block_id</b> и
			<b>block_name</b>) - блок будет восстановлен со всеми деталями его конфигурации. Если вы все же хотите
			финально удалить файлы блока (мы рекомендуем это делать, если вы проверили что блок удален корректно) - то
			откройте <span class="term">Список страниц</span> и вы увидите, что в боковом меню появится новая опция
			<span class="term">Подчистить файлы</span>, рядом с которой также показано количество файлов для очистки.
			Зайдите на эту опцию и удалите неиспользуемые файлы блоков.
		</p>
		<p class="important">
			<b>Важно!</b> После удаления файлов блоков (файл шаблона и файл конфигурации) на странице
			<span class="term">Подчистить файлы</span> - восстановить детали удаленного блока будет невозможно. В
			случае необходимости восстановления вам придется заново создать и настроить блок на странице.
		</p>
	</div>
	<!-- ch_website_ui_blocks_usage(end) -->
	<!-- ch_website_ui_blocks_params(start) -->
	<div>
		<h3 id="section_website_ui_blocks_params">Параметры конфигурации и шаблоны блоков</h3>
		<p>
			Параметры конфигурации блока определяют его поведение на странице. Почти все блоки поддерживают большое
			кол-во параметров конфигурации (кроме разве что самых простых блоков). Шаблон блока предназначен для
			отображения данных, подготовленных блоком, либо наоборот, подготавливает данные для бизнес логики блока
			(это скорее относится к блокам, которые отображают различные формы для заполнения). Важно понимать, что
			разные блоки на странице (даже блоки одного типа) могут иметь кaрдинально разные параметры и шаблоны.
			Таким образом, параметры блока и его шаблон определяют логику поведения и отображения конкретного блока на
			конкретной странице. <!--TODO: screenshot with several blocks -->
		</p>
		<p>
			При подключении блока на странице он инициалируется параметрами по умолчанию и шаблоном, который содержит
			только текст с названием блока. Для изменения параметров блока и его шаблона следует зайти на страницу
			редактирования выбранного блока на выбранной странице. Сделать это можно либо с общего списка
			<span class="term">Cтраниц сайта</span>, где для каждой страницы отображаются блоки со ссылками на их
			редактирование, либо с редактора отдельно взятой страницы, где отображается список подключенных на странице
			блоков.
		</p>
		<p>
			Страница редактирования блока поддерживает следующие поля:
		</p>
		<ul>
			<li>
				<span class="term">Название блока</span> - название блока на данной странице, поле не редактируется.
				Название блока берется из директивы подключения блока, которая была вставлена в шаблон страницы. Если
				вы измените название блока в директиве - то это будет уже другой блок с другими параметрами и шаблоном.
			</li>
			<li>
				<span class="term">Уникальный ID блока</span> - внутренний идентификатор блока на странице.
			</li>
			<li>
				<span class="term">Тип блока</span> - идентификатор типа блока, поле не редактируется. Рядом с
				идентификатором типа блока находятся ссылки для отображения описания блока и его шаблона по умолчанию.
				Шаблон по умолчанию описывает основные аспекты отображения блока, поэтому вы можете его использовать в
				качестве примера верстки блока.
			</li>
			<li>
				<span class="term">Использует компоненты</span> - перечисляет все компоненты страниц, которые
				подключаются в шаблоне данного блока.
			</li>
			<li>
				<span class="term">Код шаблона</span> - указывает код шаблона Smarty для данного блока на данной
				странице. В шаблоне блока вы можете использовать подключение компонентов страниц и рекламных спотов, но
				не можете подключать другие блоки. Если вы не знаете, какие переменные можно использовать в шаблоне
				блока для отображения той или иной информации, откройте для данной страницы отладчик и там вы увидите
				все доступные переменные и их актуальные значения (см. главу про отладку страниц сайта).
			</li>
			<li>
				<span class="term">Время жизни кэша</span> - длительность жизни кэша в секундах, которая указывает, как
				долго данный блок будет использовать кэш на данной странице. Если указано значение <b>0</b> - то блок
				кэшироваться не будет. Для блоков, которые не поддерживают кэширование данное поле не доступно для
				редактирования.
			</li>
			<li>
				<span class="term">Выключить кэшированиe для зарегистрированных пользователей</span> - позволяет
				выключить кэширование этого блока для зарегистрированных пользователей сайта. Если эта галочка
				включена, то вы можете настраивать чтобы шаблон блока показывал различное содержимое различным
				пользователям сайта (например, выводить в шаблоне блока "Привет, &lt;имя пользователя&gt;". Мы не
				рекомендуем использовать эту опцию для блоков списков, поскольку они дают основную нагрузку на базу
				данных.
			</li>
			<li>
				<span class="term">Параметры конфигурации</span> - таблица с поддерживаемыми параметрами и их
				значениями для данного блока (если блок имеет параметры конфигурации). Для того, чтобы включить
				параметр необходимо включить соответствующий чекбокс и ввести необходимое значение (для булевских
				параметров значение не требуется, такие параметры просто включаются / выключаются). Включенные
				параметры помечаются жирным шрифтом.
			</li>
		</ul>
		<p>
			Среди разнообразных параметров стоит выделить так называемые <b>var</b>-параметры, которые используются во
			многих блоках, например, <b>var_from</b> - для пагинации, <b>var_video_dir</b> - для отображения видео и
			т.д. Данные параметры ссылаются на названия HTTP параметров, которые следует использовать блоку на данной
			странице для своей работы. Рассмотрим пример с блоком списка видео <b>list_videos</b>. Для того, чтобы
			отобразить список видео по какой-либо категории, блоку необходимо знать идентификатор этой категории.
			Категория может быть идентифицирована 2-мя способами: по числовому идентификатору и директории.
			Предположим, что мы хотим отобразить список видео по директории категории (как обычно и делается для
			создания красивых ссылок на сайте). Для этого блоку необходимо знать, в каком HTTP параметре передается
			директория категория для отображения, за что отвечает параметр блока <b>var_category_dir</b>, который
			указывает блоку в каком HTTP параметре искать значение директории категории. Это значит, что если для
			данного параметра установлено значение <b>dir</b>, то ссылка на страницу с текущим блоком должна содержать
			значение директории категории в HTTP параметре <b>dir</b>, т.е.
			<b>/page_id.php?dir=category_directory_value</b>. Аналогичное правило справедливо для всех
			<b>var</b>-параметров.
		</p>
		<p>
			Почему бы не сделать фиксированными названия HTTP параметров, которые понимаются блоками? Здесь есть 2
			аспекта, которые мы учли. Во-первых, само по себе включение параметра в настройках блока может влиять на
			работу блока, даже если значение для него не передается в HTTP запросе. Во-вторых, схема с указанием
			параметров, в которых блоку передаются данные, позволяет вывести несколько списков видео по разным
			категориям - например, можно сделать страницу, на которой отобразятся 3 списка видео по 3 наиболее
			популярным категориям у вас на сайте. Для этого вам придется передать на страницу директории (или ID) 3-х
			категорий, естественно в разных HTTP параметрах. Вероятно, вам вряд ли понадобится такая функциональность,
			но тем не менее движок KVS позволяет ее реализовать.
		</p>
		<p>
			К счастью, в подавляющем большинстве случаев значение соответствующего <b>var</b>-параметра можно оставить
			как оно предлагается по умолчанию. Вам необходимо только учитывать, что для корректного поведения блока на
			странице ссылка на эту страницу должна содержать необходимые блоку значения <b>var</b>-параметров. Если на
			вашем сайте используется mod_rewrite для ссылок (что скорее всего), то правила mod_rewrite должны также
			учитывать необходимые блоку <b>var</b>-параметры.
		</p>
		<p>
			<b>var</b>-параметры являются одним из ключевых звеньев движка сайта KVS, поскольку они обеспечивают блоки
			необходимой для работы информацией, а также используются для кэширования блоков и страниц. Названия и
			значения <b>var</b>-параметров по умолчанию настроены таким образом, чтобы подходящие друг к другу блоки
			могли работать совместно на одной странице. Так, например, блоки <b>video_view</b>,
			<b>video_comments</b>, <b>list_videos</b> и <b>top_referers</b> имеют параметры с одинаковым названием и
			значением <b>var_video_dir</b> и <b>var_video_id</b>. При подключении этих блоков на одной странице и
			включении во всех блоках одного из данных параметров блоки будут отображать информацию о видео, комментарии
			к видео, список похожих видео и список рефереров, подходящих к видео по категории соответственно.
		</p>
		<p>
			В большинстве случаев одинаковые блоки на разных страницах имеют похожий внешний вид, за исключением
			конечного ряда элементов (например, название списка видео может быть разным на каждой странице - но в
			целом все списки видео выглядят одинаково). В таких случаях логику отображения блока (шаблон) стоит вынести
			в компонент страниц, а в самом шаблоне блока подключить этот компонент. Различающиеся элементы (как
			название) следует вывести через переменные Smarty, значение которым должно быть присвоено непосредственно
			перед подключением компонента на странице. Это сделано в дизайне по умолчанию, где существует несколько
			компонентов страниц для отображения наиболее часто используемых блоков (например, компоненты
			<b>list_videos_block_common.tpl</b> и <b>list_videos_block_internal.tpl</b>, которые используются блоком
			<b>list_videos</b>).
		</p>
	</div>
	<!-- ch_website_ui_blocks_params(end) -->
	<!-- ch_website_ui_blocks_pagination(start) -->
	<div>
		<h3 id="section_website_ui_blocks_pagination">Блоки списков и пагинация</h3>
		<p>
			Почти половина существующих в KVS блоков является блоками списка. Блоки списка отличаются
			от других блоков тем, что они поддерживают возможность отображать только часть списка и навигацию по
			страницам списка (пагинацию), хотя могут быть также настроены на отображение полного списка объектов
			(сколько есть).
		</p>
		<p>
			Все блоки списка поддерживают пагинацию внутри самого блока, а также поддерживают возможность пагинации
			через ajax без перезагрузки страницы (в шаблонах по умолчанию это не используется). Для включения пагинации
			в блоке списка должен быть включен параметр блока <b>var_from</b>, который указывает блоку в каком HTTP
			параметре приходит информация о текущей странице (по умолчанию <b>var_from=from</b>). Кроме этого параметра
			блока, вы можете также использовать другие параметры пагинации, которые поддерживаются каждым блоком
			списка:
		</p>
		<ul>
			<li>
				<b>items_per_page</b> - количество объектов списка на одной странице. Исходя из этого значения и общего
				количества имеющихся у списка объектов будет рассчитано количество страниц списка.
			</li>
			<li>
				<b>links_per_page</b> - количество номеров страниц в навигации, отображаемых на одной странице.
			</li>
		</ul>
		<p>
			После настройки параметров блока вам также необходимо добавить в шаблон блока отображение ссылок пагинации
			(по умолчанию шаблоны блоков не содержат этого). Для этого вы можете просто подключить в нужном месте
			шаблона блока компонент страниц <b>pagination_block_common</b> (который содержит логику отображения
			списка страниц):
		</p>
		<p class="code">
			...<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Подключаем пагинацию вверху списка *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}include file="pagination_block_common.tpl"{{$smarty.rdelim}}<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Дальше идет сам список *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}foreach name=data item=item from=$data{{$smarty.rdelim}}<br/>
			...<br/>
			{{$smarty.ldelim}}/foreach{{$smarty.rdelim}}<br/><br/>

			<span class="comment">{{$smarty.ldelim}}* Подключаем вторую пагинацию снизу списка - это пример того, что можно в блоке 2 раза подключить *{{$smarty.rdelim}}</span><br/>
			{{$smarty.ldelim}}include file="pagination_block_common.tpl"{{$smarty.rdelim}}<br/><br/>

			...
		</p>
		<p>
			Все ссылки пагинации, которые отображаются внутри блока работают по схеме, удобной для поисковых ботов:
		</p>
		<p class="code">
			http://your_domain.com/popular_videos/<br/>
			http://your_domain.com/popular_videos/1/<br/>
			http://your_domain.com/popular_videos/2/<br/>
			... и т.д.
		</p>
		<p>
			Альтернативно вы можете настроить другую схему ссылок, полная информация об этом есть в FAQ.
		</p>
		<p>
			Для того, чтобы эти ссылки работали корректно, необходимы корректные правила mod_rewrite, которые созданы
			для всех существующих списков. Если вы добавляете новые списки либо изменяете адреса страниц для
			существующих, вам необходимо следить за тем, чтобы правила mod_rewrite для пагинации были указаны верно.
		</p>
		<p>
			Несмотря на то, что пагинация поддерживается всеми блоками списка, она может также отображаться отдельным
			блоком <b>pagination</b>. Во-первых, это необходимо для совместимости со старыми версиями KVS. Во-вторых,
			отдельный блок пагинации поддерживает некоторые расширенные возможности пагинации для особых случаев
			(информация об этом есть в документации блока <b>pagination</b>).
		</p>
		<p class="important">
			<b>Важно!</b> Вы не должны использовать одинаковые значения параметров <b>var_from</b> для блоков, которые
			находятся на одной странице. Поскольку разные списки могут иметь разное кол-во элементов, для каждого блока
			номер страницы должен передаваться в разных параметрах, иначе в каких-то блоках такого номера страницы
			может не существовать и страница будет показывать 404 ошибку. Повторимся, это актуально только для тех
			страниц, на которых добавлено несколько блоков списков.
		</p>
		<p>
			В завершение разговора о пагинации рассмотрим пагинацию через ajax. Для этого вам нужно внести всего 2
			изменения в концепцию пагинации описанную выше:
		</p>
		<ul>
			<li>
				Во-первых, весь шаблон (HTML код) блока списка должен быть обернут в div с уникальным идентификатором
				блока:
				<span class="code">
					&lt;div id="{{$smarty.ldelim}}$block_uid{{$smarty.rdelim}}"&gt;<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;...<br/>
					&lt;/div&gt;
				</span>
			</li>
			<li>
				Во-вторых, вместо подключения компонента страниц <b>pagination_block_common</b>, вам необходимо
				подключить компонент <b>pagination_block_ajax</b>:
				<span class="code">
					{{$smarty.ldelim}}include file="pagination_block_ajax.tpl"{{$smarty.rdelim}}
				</span>
			</li>
		</ul>
	</div>
	<!-- ch_website_ui_blocks_pagination(end) -->
	<!-- ch_website_ui_blocks_global(start) -->
	<div>
		<h3 id="section_website_ui_blocks_global">Глобальные блоки</h3>
		<p>
			При подключении блока на странице сайта, вам необходимо задать его параметры и шаблон, которые будут
			использоваться блоком на данной странице. Зачастую при работе с сайтом возникает необходимость использовать
			одинаково настроенные блоки на многих страницах сайта. Например, вы можете показывать облако тэгов на
			разных страницах, либо топ 10 поисковых запросов по сайту за последние 7 дней. Чтобы избежать дублирования
			в настройках таких блоков и их шаблонах, KVS предоставляет возможность создавать глобальные блоки сайта и
			подключать их на разных страницах.
		</p>
		<p>
			Глобальные блоки создаются вручную на списке <span class="term">Глобальных блоков</span> в разделе
			<span class="term">UI сайта</span>. Вы должны выбрать тип блока и указать его название. Затем вы можете
			зайти на страницу редактирования этого блока и настроить его шаблон и параметры один раз.
		</p>
		<p>
			Для вставки глобального блока на любой странице сайта необходимо использовать специальный синтаксис
			глобального блока:
		</p>
		<p class="code">
			{{$smarty.ldelim}}insert name="getGlobal" global_id="%UNIQUE_BLOCK_ID%"{{$smarty.rdelim}}
		</p>
		<p>
			Директива для подключения глобального блока отображается прямо на списке глобальных блоков, вам необходимо
			лишь скопировать ее и вставить в нужное место шаблона страницы. Если вы в какой-то момент захотите изменить
			шаблон или параметры глобального блока - внесенные изменения затронут все страницы, где используется данный
			блок.
		</p>
		<p class="important">
			<b>Важно!</b> Подключать глобальные блоки как и обычные блоки можно только в шаблонах страниц.
		</p>
	</div>
	<!-- ch_website_ui_blocks_global(end) -->
	<h2 id="section_website_ui_advertising">Реклама и Рекламные споты</h2>
	<!-- ch_website_ui_advertising_usage(start) -->
	<div>
		<h3 id="section_website_ui_advertising_usage">Использование рекламных спотов на сайте</h3>
		<p>
			KVS предоставляет простой модуль управления рекламой, функциональности которого достаточно
			для большинства нужд.
		</p>
		<p>
			Рекламные споты являются контейнерами для рекламы на сайте. Они могут использоваться где угодно: в шаблонах
			страниц, компонентов и блоков. К каждому рекламному споту можно привязать любое кол-во рекламы, в таком
			случае реклама будет ротироваться в случайном порядке.
		</p>
		<p>
			Для подключения рекламного спота в шаблоне страницы, компонента или блока используется такая директива:
		</p>
		<p class="code">
			{{$smarty.ldelim}}insert name="getAdv" place_id="%ADVERTISING_SPOT_EXTERNAL_ID%"{{$smarty.rdelim}}
		</p>
		<p>
			В данном примере токен <b>%ADVERTISING_SPOT_EXTERNAL_ID%</b> должен быть заменен на
			<span class="term">идентификатор</span> требуемого рекламного спота, например <b>top_banner</b>:
		</p>
		<p class="code">
			{{$smarty.ldelim}}insert name="getAdv" place_id="top_banner"{{$smarty.rdelim}}
		</p>
	</div>
	<!-- ch_website_ui_advertising_usage(end) -->
	<!-- ch_website_ui_advertising_admin_panel(start) -->
	<div>
		<h3 id="section_website_ui_advertising_admin_panel">Работа с рекламой в панели администрирования</h3>
		<p>
			Поля данных, которые поддерживаются рекламными спотами:
		</p>
		<ul>
			<li>
				<span class="term">Название</span> - название рекламного спота для панели администрирования.
			</li>
			<li>
				<span class="term">Идентификатор</span> - уникальный идентификатор, который будет использоваться для
				подключения рекламного спота на сайте. Может содержать ограниченный набор символов (a-z, A-Z, 0-9, _).
			</li>
		</ul>
		<p>
			Поля данных, которые поддерживаются рекламой:
		</p>
		<ul>
			<li>
				<span class="term">Название</span> - название рекламы для панели администрирования.
			</li>
			<li>
				<span class="term">Рекламный спот</span> - позволяет выбрать рекламный спот, к которому будет привязана
				данная реклама. Реклама будет отображаться только в выбранном рекламном споте.
			</li>
			<li>
				<span class="term">Статус</span> - включение / выключение рекламы. На сайте будет отображаться только
				реклама в активном статусе.
			</li>
			<li>
				<span class="term">Дата показа</span> - позволяет указать интервал дат, в течение которого будет
				показываться данная реклама. Если дата показа не указана, то реклама будет отображаться постоянно.
				Возможно также указать только дату начала показа, либо только дату окончания показа.
			</li>
			<li>
				<span class="term">HTML код</span> - рекламный контент (только статический HTML код).
			</li>
			<li>
				<span class="term">URL выхода</span> - позволяет включить подсчет кликов по данной рекламе в
				статистике. Если это поле используется, то HTML код для рекламы должен содержать токен <b>%URL%</b>
				везде, где ожидается URL выхода. В этом случае токен будет заменен на внутренний скрипт редиректа,
				которой зачтет клик в статистике и сделает редирект на рекламу.
			</li>
		</ul>
	</div>
	<!-- ch_website_ui_advertising_admin_panel(end) -->
	<h2 id="section_website_ui_pages">Страницы сайта</h2>
	<!-- ch_website_ui_pages_reference(start) -->
	<div>
		<h3 id="section_website_ui_pages_reference">Общая информация о страницах</h3>
		<p>
			Страницы являются точками входа в движок KVS и элементами построения сайта самого верхнего
			уровня. Страницы могут состоять из всех элементов, описанных выше: компонентов, блоков и рекламных спотов.
		</p>
		<p>
			Каждая страница имеет свой уникальный идентификатор, на основе которого создается PHP файл страницы и ее
			шаблон отображения. PHP файл страницы используется для указания ссылок на нее.
		</p>
		<p>
			Вы можете создать страницу в любой момент, при этом она не будет использоваться до тех пор, пока вы не
			установите ссылку на нее в каком-либо месте сайта. Точно так же вы можете удалить страницу в любой момент,
			и, если на нее остались ссылки с других страниц, - ссылки перестанут работать.
		</p>
		<p>
			Ссылки на страницу должны содержать все необходимые параметры для ее работы (этими параметрами на самом
			деле являются включенные <b>var</b>-параметры всех блоков данной страницы, как было описано выше). В
			большинстве случаев в шаблонах по умолчанию используются абстрактные ссылки, которые перекрываются через
			mod_rewrite, всвязи с чем многие необходимые странице параметры подставляются на основе частей URL-ов,
			например для ссылки на страницу просмотра видео <b>/videos/123/my-uploaded-video/</b>
			применяется такое правило перенаправления:
		</p>
		<p class="code">
			RewriteRule ^videos/([0-9]+)/([^/]+)/$ /view_video.php?id=$1&amp;dir=$2 [L,QSA]
		</p>
		<p>
			Это правило говорит о том, что ссылка <b>/videos/123/my-uploaded-video/</b> будет перенаправлена на
			страницу с идентификатором <b>view_video</b> (PHP файл страницы <b>view_video.php</b>), при этом в качестве
			параметра <b>id</b> будет использоваться число после <b>videos/</b>, а в качестве параметра <b>dir</b>
			будет использоваться последняя часть URL-а, т.е. в нашем примере будет осуществлен такой вызов:
		</p>
		<p class="code">
			/view_video.php?id=123&amp;dir=my-uploaded-video
		</p>
		<p>
			Далее этот вызов подхватится движком, который вызовет все блоки на данной странице, передавая им параметры
			<b>id=123</b> и <b>dir=my-uploaded-video</b>. Блоки выведут всю необходимую информацию, базируясь на
			значениях данных параметров. В приведенном примере блок <b>video_view</b>, который находится на данной
			странице, отобразит информацию о видео с айди <b>123</b>, если директория этого видео совпадает с
			директорией, переданной в параметре <b>dir</b>. Если же директория не совпадает, то блок сделает 301
			редирект на это же видео, но с корректной директорией.
		</p>
		<p>
			Аналогичным образом происходит обработка всех страниц сайта, которые созданы через панель
			администрирования.
		</p>
		<p>
			Дополнительно к правилам mod_rewrite есть также глобальные настройки, в которых требуется указать паттерны
			для ссылок на страницы просмотра различных объектов (видео, фотоальбомов, моделей и т.д.). Эти паттерны
			используются для создания ссылок на просмотр видео и других объектов на сайте и из панели
			администрирования. Эти настройки находятся на странице <span class="term">Настройки сайта</span> в разделе
			<span class="term">Настройки</span> панели администрирования. Заданные в настройках паттерны должны иметь
			соответствующие правила mod_rewrite, чтобы ссылки на генерировали 404 ошибок.
		</p>
	</div>
	<!-- ch_website_ui_pages_reference(end) -->
	<!-- ch_website_ui_pages_admin_panel(start) -->
	<div>
		<h3 id="section_website_ui_pages_admin_panel">Работа со страницами в панели администрирования</h3>
		<p>
			Файлы страниц хранятся в корне домена на сервере (PHP файл) и в директории <b>/template</b> (файл шаблона).
		</p>
		<p>
			Если Apache не имеет привилегий на создание файлов в корне сайта, перед созданием страницы вам необходимо
			вручную скопировать ее шаблон PHP файла из <b>/admin/tools/page_template.php</b> в корневую директорию
			проекта и переименовать его в PHP файл страницы. Переименованный файл должен иметь имя
			<b>%external_id%.php</b>, где в качестве токена <b>%external_id%</b> нужно использовать тот идентификатор,
			который вы будете использовать при создании страницы (например, если вы хотите создать страницу с
			идентификатором <b>my_new_page</b>, то перед ее созданием вы должны скопировать шаблон PHP файла в файл
			<b>/my_new_page.php</b> в корневой директории проекта). Если вы не скопировали PHP файл страницы в нужное
			место и KVS не может сделать это самостоятельно - вы увидите ошибку при попытке создания страницы.
		</p>
		<p>
			Аналогичным образом перед удалением страницы вы должны удалить ее PHP файл из корневой директории проекта,
			только тогда вы сможете удалить саму страницу целиком.
		</p>
		<p>
			<span class="term">Список страниц</span> является основным в разделе <span class="term">UI сайта</span>
			панели администрирования. Список отображает иерархическую структуру страниц с блоками на них (строки,
			относящиеся к страницам выделены жирным), а также позволяет изменять базовые настройки кэширования страниц
			и блоков. Список содержит следующие столбцы:
		</p>
		<ul>
			<li>
				<span class="term">Название страницы / блока</span> - название страницы либо блока в засимости от
				строки.
			</li>
			<li>
				<span class="term">ID блока</span> - идентификатор блока на странице (для строк, которые показывают
				информацию о блоках).
			</li>
			<li>
				<span class="term">Кэш</span> - время жизни кэша страницы либо блока в секундах. Поскольку некоторые
				блоки не поддерживают кэширование, поле кэша не будет редактируемым для таких блоков, а также для
				страниц, которые содержат такие блоки.
			</li>
			<li>
				<span class="term">Сжатие</span> - указывает, используется ли сжатие кэша (только для строк страниц).
			</li>
			<li>
				<span class="term">Загрузок</span> - показывает кол-во запросов каждой страницы сайта с момента
				последнего сброса статистики производительности. Это значение можно расценивать как относительную
				популярность той или иной страницы.
			</li>
			<li>
				<span class="term">Производительность</span> - показывает статистику производительности каждой страницы
				сайта с момента последнего ее сброса.
			</li>
		</ul>
		<p>
			Создать новую страницу можно 2 способами:
		</p>
		<ul>
			<li>
				Создать страницу вручную в панели администрирования, указав ее идентификатор и код шаблона. После
				создания настроить параметры и шаблоны блоков, подключенных на странице.
			</li>
			<li>
				Сделать дубликат уже существующей страницы. Для этого вы можете воспользоваться опцией
				<span class="term">Сделать копию</span> в контекстном меню исходной страницы на списке. Вам
				необходимо ввести только название идентификатора новой страницы. Копирование существующих страниц
				удобно тем, что оно полностью копирует все настройки исходной страницы, создаваю ее идентичную копию.
			</li>
		</ul>
		<p>
			При добавлении / редактировании страницы поддерживают следующие поля:
		</p>
		<ul>
			<li>
				<span class="term">Название</span> - название страницы для панели администрирования.
			</li>
			<li>
				<span class="term">Идентификатор</span> - уникальный идентификатор страницы, может содержать
				ограниченный набор символов (a-z, A-Z, 0-9, _). Данный идентификатор используется для PHP файла и
				шаблона страницы. Идентификатор не может быть изменен после создания страницы.
			</li>
			<li>
				<span class="term">Статус</span> - позволяет выключить страницу. При запросе выключенной страницы на
				сайте будет отображаться 404 ошибка, как будто такой страницы не существует.
			</li>
			<li>
				<span class="term">Время жизни кэша</span> - время кэширования страницы в оперативной памяти. Если
				указано значение <b>0</b> - то страница кэшироваться не будет. Для страниц, содержащих блоки, которые
				не поддерживают кэширование, данное поле не редактируется.
			</li>
			<li>
				<span class="term">Включить сжатие MemCache</span> - указывает, использовать ли для данной страницы
				сжатие кэша. Включенная опция позволяет уменьшить загрузку оперативной памяти, однако приводит к
				небольшой потери производительности страницы.
			</li>
			<li>
				<span class="term">XML содержимое</span> - указывает, что данная страница будет выводить данные в XML
				формате. Используется для организации любых XML фидов.
			</li>
			<li>
				<span class="term">Запретить доступ для</span> - предоставляет возможность запретить доступ к данной
				странице для определенного круга пользователей сайта.
			</li>
			<li>
				<span class="term">При запрете перенаправлять по URL-у</span> - если вы включили запрет доступа к
				странице для части пользователей, вы можете указать URL, по которому они должны быть перенаправлены в
				случае несанкционированного доступа. Если ничего не указано, то страница отображит 403 ошибку.
			</li>
			<li>
				<span class="term">Правила из .htaccess</span> - поле доступно только для существующих страниц и
				показывает правила из корневого .htaccess файла, с которыми ассоциируется данная страница.
			</li>
			<li>
				<span class="term">Использует компоненты</span> - перечисляет все компоненты страниц, которые
				подключаются в шаблоне данной страницы.
			</li>
			<li>
				<span class="term">Код шаблона</span> - код шаблона Smarty для данной страницы. В шаблонах страниц
				можно использовать подключение блоков, компонентов страниц и рекламных спотов.
			</li>
			<li>
				<span class="term">Содержимое страницы и стратегия кэширования</span> - таблица со списком блоков,
				которые подключены на данную страницу, а также для каждого блока список включенных параметров, их
				значений и описание для каждого параметра. Таблица позволяет быстро изменить значение любого
				включенного параметра для любого блока на странице, а также время жизни кэша блока. Для включения или
				выключения какого-либо из параметров блока вам нужно зайти на страницу редактирования этого блока,
				используя ссылку в названии блока. Для удобства таблица также выводит значение глобальной переменной
				<b>$storage</b> по каждому блоку, которое может быть использовано в шаблоне страницы для обращения к
				данным блоков из страницы.
			</li>
		</ul>
		<p>
			Более подробная информация о кэшировании будет представлена ниже.
		</p>
	</div>
	<!-- ch_website_ui_pages_admin_panel(end) -->
	<!-- ch_website_ui_pages_existing(start) -->
	<div>
		<h3 id="section_website_ui_pages_existing">Краткий обзор существующих страниц</h3>
		<p>
			Все существующие в дизайне по умолчанию страницы можно разбить на три логические группы:
		</p>
		<ul>
			<li>
				Страницы, которые используются во внутренней зоне пользователей и недоступны посетителям извне,
				например, страница редактирования профиля пользователя, страница загрузки видео и т.д. Такие страницы
				имеют префикс <b>[Memberzone]</b> в названии, а также префикс <b>member_my_</b> в идентификаторе
				страницы (например, <b>[Memberzone] My Friends Events</b> и <b>member_my_friends_events</b>).
			</li>
			<li>
				Страницы, которые отображают данные в контексте какого-либо пользователя и доступны всем пользователям,
				например, страница со списком видео, загруженного пользователем, страница со списком друзей
				пользователя и т.д. Такие страницы имеют префикс <b>Member's</b> в названии, а также префикс
				<b>member_</b> в идентификаторе страницы (например, <b>Member's Events</b> и <b>member_events</b>).
			</li>
			<li>
				Другие публичные страницы не связанные с пользователями, например, список категорий, страница логина и
				т.д.
			</li>
		</ul>
		<p>
			При создании новых страниц мы рекомендуем учитывать данные конвенции наименования.
		</p>
	</div>
	<!-- ch_website_ui_pages_existing(end) -->
	<h2 id="section_website_ui_caching">Кэширование</h2>
	<p>
		Кэширование позволяет заметно снизить нагрузку на сервер при увеличении трафика на сайте. Движок Kernel Video
		Sharing поддерживает 2 уровня кэширования: стандартное кэширование на уровне шаблонов блоков и сверхбыстрое
		кэширование целых страниц в оперативной памяти.
	</p>
	<p>
		Основным управляющим параметром кэширования является поле <span class="term">Время жизни кэша</span>, которое
		используется как для блоков, так и для страниц. Чем больше время жизни кэша, тем меньше нагрузка на сервер, но
		в то же время меньше и актуальность информации. Страницы / блоки, которые обновляются не часто, могут быть
		закэшированы на более длительное время (например, список категорий). Страницы / блоки, которые должны
		обновляться регулярно - на меньшее время (например, индексная страница). Если вы хотите выключить кэширование
		для страницы или блока, просто установите время жизни кэша в <b>0</b>.
	</p>
	<!-- ch_website_ui_caching_blocks(start) -->
	<div>
		<h3 id="section_website_ui_caching_blocks">Кэширование первого уровня (кэширование блоков)</h3>
		<p>
			Кэширование первого уровня (кэширование блоков) является относительно медленным кэшированием. Этот вид
			кэширования можно использовать практически везде, где он поддерживается блоками. Как уже было замечено
			выше, некоторые блоки не поддерживают кэширование (в основном это блоки, которые содержат формы для
			заполнения, т.е. блок логина, блок загрузки видео и д.р.). Некоторые блоки не поддерживают кэширование при
			определенной конфигурации параметров, например, блок списка видео не включает кэширование при отображении
			результатов поиска, а также в некоторых других случаях. В любом случае, даже при включенном кэшировании
			движок самостоятельно решит, что следует кэшировать, а что нет.
		</p>
		<p>
			Для включения кэширования первого уровня вы можете установить время жизни кэша для каждого блока
			индивидуально. Вы можете сделать это в панели администрирования практически везде, где есть возможность
			редактирования блока. Лучше всего это сделать на <span class="term">Списке страниц</span>,
			где можно настроить кэширование для всего сайта глобально.
		</p>
	</div>
	<!-- ch_website_ui_caching_blocks(end) -->
	<!-- ch_website_ui_caching_pages(start) -->
	<div>
		<h3 id="section_website_ui_caching_pages">Кэширование второго уровня (кэширование страниц)</h3>
		<p>
			Кэширование второго уровня (кэширование страниц целиком) является исключительно быстрым видом кэширования.
			Закэшированные страницы помещаются в оперативную память и сбрасываются пользователю при запросе.
			Кэширование страниц зависит во многом от блоков, которые используются на данной странице. Если хотя бы
			один из блоков не поддерживает кэширование, то страница целиком также не сможет быть закэширована. В то же
			время любые другие блоки на этой странице, которые поддерживают кэширование, могут быть закэшированы,
			используя кэширование первого уровня.
		</p>
		<p>
			Кэширование второго уровня дополнительно поддерживает опцию сжатия кэша, которая помогает сэкономить
			оперативную память, но в то же время уменьшает скорость работы кэша. Данную опцию следует использовать на
			страницах, количество экземпляров которых в кэше относительно большое (например, для страницы просмотра
			видео, поскольку в кэше хранится большое количество экземпляров страницы для всех видео).
		</p>
		<p>
			Для включения кэширования второго уровня вы можете установить время жизни кэша для каждой страницы
			индивидуально. Вы можете сделать это в панели администрирования на
			<span class="term">Списке страниц</span>, где можно настроить кэширование для всего сайта глобально.
		</p>
	</div>
	<!-- ch_website_ui_caching_pages(end) -->
	<!-- ch_website_ui_caching_important(start) -->
	<div>
		<h3 id="section_website_ui_caching_important">Важные аспекты кэширования</h3>
		<p>
			Существует несколько важных аспектов кэширования, которые обязательно необходимо прочитать и понять, прежде
			чем работать с настройкой сайта.
		</p>
		<p>
			Кэширование не включается для администратора (если он залогинен в панели администрирования). Это
			сделано для того, чтобы при работе с сайтом не возникало каких-либо задержек при начальной отладке.
			Финальное же тестирование сайта должно быть выполнено с учетом кэширования. Этого можно добиться, если
			тестировать сайт в другом браузере (не в том, в котором идет работа с панелью администрирования).
		</p>
		<p>
			Кэширование ограничивает возможности кастомизации сайта (особенно кэширование второго уровня). Так,
			нельзя, чтобы отображение какого-либо контента зависело от параметров, которые передаются на страницу.
			Рассмотрим простейший пример: необходимо передать идентификатор вебмастера, который затем будет
			подставлен в ссылку на спонсора (учет партнерского трафика). Если данный идентификатор передается в
			параметре <b>wm_id</b>, то простой вариант, который может прийти в голову - это вывести ссылку на
			спонсора и в ней указать значение из параметра запроса:
		</p>
		<p class="code">
			&lt;a href="http://sponsor.com?wm_id={{$smarty.ldelim}}$smarty.request.wm_id{{$smarty.rdelim}}"&gt;
		</p>
		<p>
			Это не будет работать при включенном кэшировании, поскольку в течение времени жизни кэша данная ссылка
			будет содержать одно и то же значение параметра <b>wm_id</b>. Для корректной работы подобных параметров
			следует использовать поля <span class="term">Динамические HTTP параметры</span> в
			<span class="term">Настройках сайта</span> в разделе <span class="term">Настройки</span> панели
			администрирования. В этих полях вы можете перечислить до 5 HTTP параметров, которые будут учитываться
			независимо от кэширования. Кроме того, эти HTTP параметры будут также учитываться в ссылках на контент
			провайдеров и на рекламу.
		</p>
		<p>
			Для использования этих параметров вам нужно вставить в шаблоне (URL-е контент провайдера, URL-е рекламы)
			токен вида <b>%param_name%</b>, т.е. для примера выше ссылка на спонсора должна выглядеть таким образом:
		</p>
		<p class="code">
			&lt;a href="http://sponsor.com?wm_id=%wm_id%"&gt;
		</p>
		<p>
			Это подразумевает, что вы указали параметр <b>wm_id</b> в одном из полей
			<span class="term">Динамические HTTP параметры</span>.
		</p>
		<p>
			В случаях, когда блок не поддерживает кэширование, использование параметров запроса все-таки корректно. В
			качестве примера можно рассмотреть блок редактирования профиля пользователя, который отображает 3 различные
			формы в зависимости от значения HTTP параметра <b>action</b>, переданного на страницу. Поскольку данный
			блок не поддерживает кэширование и, соответственно, страница на которой он включается также не поддерживает
			кэширование - использование параметров запроса в данным контексте представляется возможным.
		</p>
		<p>
			Таким образом, в большинстве случаев вы не можете безболезненно использовать переменные типа
			<b>$smarty.request</b>, <b>$smarty.get</b>, <b>$smarty.post</b> в шаблонах сайта. Вместо них следует
			использовать динамические HTTP параметры.
		</p>
		<p>
			Кэширование второго уровня автоматически отключается для залогиненных пользователей. Это позволяет не
			только показывать "Привет, username" в шапке сайта, но и вообще использовать любые данные из сессии
			пользователя в шаблоне самой страницы (но не в шаблонах блоков!)
		</p>
		<p>
			В большинстве случаев вы не можете использовать значения из сессии пользователя (<b>$smarty.session</b>) в
			шаблонах блоков, чтобы показывать различный контент различным пользователям сайта, поскольку для всех
			пользователей используется один и тот же экземпляр кэша блока. Исключение на данный момент составляют блоки
			<b>video_view</b>, <b>video_comments</b>, <b>album_view</b>, <b>album_comments</b>, <b>album_images</b>,
			<b>dvd_view</b> и <b>dvd_comments</b>. Эти блоки сохраняют разные версии кэша для разных пользователей.
			Также использовать данные из сессии пользователя можно во всех блоках, которые не кэшируются.
		</p>
		<p>
			Для проверки корректности настройки кэширования запустите проверку страниц, блоков и шаблонов сайта в
			плагине аудита. Если проверка не выдает ошибок - скорее всего проблем никаких не будет. Любые ошибки должны
			быть исправлены, т.к. скорее всего они влияют на работоспособность сайта.
		</p>
		<p>
			При необходимости сбросить кэш первого или второго уровня вы можете воспользоваться опциями
			<span class="term">Сбросить файловый кэш</span> и <span class="term">Сбросить MemCache</span>
			соответственно. Эти опции находятся в боковой панели раздела <span class="term">UI сайта</span> панели
			администрирования. Сброс кэша приведет к большому скачку нагрузки при большом трафике, поэтому эту
			операцию стоит выполнять только в исключительных случаях (например, при срочной необходимости обновить все
			страницы сайта). Сначала следует сбросить файловый кэш (кэш блоков), а через некоторое время MemCache (кэш
			страниц).
		</p>
		<p>
			Кэширование является одним из самых сложных аспектов движка KVS. Вы можете не использовать
			его вообще, можете использовать только кэширование блоков первого уровня - в этом случае все ограничения,
			описанные выше, накладываются только на шаблоны блоков. В случае необходимости кастомизации сайта, которая
			может иметь проблемы с кэшированием, мы рекомендуем вам обращаться к нам за дополнительной информацией.
		</p>
	</div>
	<!-- ch_website_ui_caching_important(end) -->
	<!-- ch_website_ui_caching_performance(start) -->
	<div>
		<h3 id="section_website_ui_caching_performance">Статистика производительности</h3>
		<p>
			Статистика производительности позволяет оценить нагрузку на любую страницу или блок и понять, насколько
			корректно выбрана стратегия кэширования.
		</p>
		<p>
			Для каждой страницы / блока на списке страниц выводятся 4 цифры:
		</p>
		<ul>
			<li>
				Количество загрузок страницы с начала процесса мониторинга.
			</li>
			<li>
				Среднее время срабатывания при использовании кэширования.
			</li>
			<li>
				Среднее время срабатывания без использования кэширования.
			</li>
			<li>
				Относительный процент кэширования. Наиболее важный параметр, который показывает как часто используется
				кэш данной страницы / блока. Чем выше это значение - тем чаще срабатывает кэш, а значит
				производительность выше.
			</li>
		</ul>
		<p>
			Статистика производительности может быть сброшена в любой момент используя опцию
			<span class="term">Сбросить статистику производительности</span> в боковой панели раздела
			<span class="term">UI сайта</span> панели администрирования.
		</p>
	</div>
	<!-- ch_website_ui_caching_performance(end) -->
	<h2 id="section_website_ui_other">Другие аспекты работы с сайтом</h2>
	<!-- ch_website_ui_other_js(start) -->
	<div>
		<h3 id="section_website_ui_other_js">JavaScript файлы</h3>
		<p>
			KVS использует несколько JavaScript файлов для работы сайта. Эти скрипты находятся в
			директории <b>/js</b> в корне домена. Некоторые блоки используют функции данных JavaScript файлов, поэтому
			требуют их включения на странице. JavaScript файлы, которые требуются блоками на какой-либо странице будут
			подключены автоматически. За вывод отвечает такая строка в шаблоне <b>header_general.tpl</b>:
		</p>
		<p class="code">
			{{$smarty.ldelim}}$js_includes|smarty:nodefaults{{$smarty.rdelim}}
		</p>
		<p>
			Все JavaScript файлы подключаются ссылками, в которых указана текущая версия софта и которые используют
			расширение <b>jsx</b>, вместо <b>js</b>. Это нужно для того, чтобы при обновлении на новую версию софта
			у всех пользователей не осталось закэшированных браузеров JavaScript файлов (т.к. поменяются все ссылки
			на них). Вот пример одной из ссылок:
		</p>
		<p class="code">
			http://your_domain.com/js/KernelTeamVideoSharingSystem_2.0.0.jsx
		</p>
		<p>
			Среди всех JavaScript файлов есть системные, которые добавляются независимо от блоков:
			<b>KernelTeamVideoSharingSystem.js</b> (добавляется всегда) и <b>KernelTeamVideoSharingMembers.js</b>
			(добавляется только для залогиненных пользователей).
		</p>
		<p>
			По умолчанию все списки видео настроены на ротацию скриншотов видео формата 240x180. JavaScript с кодом
			ротатора подключается в шапке и доступен на каждой странице. Если вы используете только 1 скриншот для
			видео, либо вам не нужна ротация скриншотов, мы рекомендуем удалить включение скрипта ротатора в шаблоне
			шапки. Подключение ротатора задается таким образом:
		</p>
		<p class="code">
			&lt;script type="text/javascript" src="{{$smarty.ldelim}}$config.project_url{{$smarty.rdelim}}/js/KernelTeamImageRotator_{{$smarty.ldelim}}$config.project_version{{$smarty.rdelim}}.jsx"&gt;&lt;/script&gt;<br/>
			&lt;script type="text/javascript"&gt;<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;KT_rotationEngineStartup(0.2, 0.5);<br/>
			&lt;/script&gt;
		</p>
		<p>
			Второй параметр при вызове функции <b>KT_rotationEngineStartup</b> устанавливает длительность показа одного
			скриншота в секундах до переключения на следующий. Первый параметр игнорируется.
		</p>
		<p>
			Сама ротация скриншотов запускается при наведении (останавливается при выходе) мышки на изображение
			скриншота:
		</p>
		<p class="code">
			<span class="comment">
				// второй параметр - путь к директории, где лежат скриншоты<br/>
				// третий параметр - кол-во скриншотов<br/>
			</span>
			onmouseover="KT_rotationStart(this, '{{$smarty.ldelim}}$config.content_url_videos_screenshots{{$smarty.rdelim}}/{{$smarty.ldelim}}$item.screen_url{{$smarty.rdelim}}/240x180/', {{$smarty.ldelim}}$item.screen_amount{{$smarty.rdelim}})"<br/>
			<br/>
			onmouseout="KT_rotationStop(this)"
		</p>
		<p>
			Если вам необходима ротация скриншотов других форматов, в обработчие события наведения мышки нужно заменить размер 240x180 на другой нужный.
		</p>
		<p>
			Следующая таблица перечисляет все JavaScript файлы, которые поставляются по умолчанию (все они находятся в
			директории <b>/js</b> в корне домена). Часть из них доступна только в полной версии KVS.
		</p>
		<div class="table">
			<table>
				<colgroup>
					<col width="10%"/>
					<col/>
				</colgroup>
				<tr class="header">
					<td>Имя файла</td>
					<td>Описание</td>
				</tr>
				<tr>
					<td>KernelTeamImageRotator.js</td>
					<td>
						Ротатор скриншотов. Подключается в шаблоне шапки сайта и может использоваться на всех
						страницах.
					</td>
				</tr>
				<tr>
					<td>KernelTeamVideoSharingAlbumEdit.js</td>
					<td>
						Скрипт для проверки и поддержки формы создания / редактирования фотоальбомов.
					</td>
				</tr>
				<tr>
					<td>KernelTeamVideoSharingAlbumView.js</td>
					<td>
						Скрипт для проверки и поддержки различных форм, которые используются в блоках фотоальбомов:
						рейтинг фотоальбомов, добавление в избранное, отправка комментария и др.
					</td>
				</tr>
				<tr>
					<td>KernelTeamVideoSharingCSView.js</td>
					<td>
						Скрипт для проверки и поддержки различных форм, которые используются в блоках контент
						провайдеров: рейтинг контент провайдеров, отправка комментария и др.
					</td>
				</tr>
				<tr>
					<td>KernelTeamVideoSharingDVDView.js</td>
					<td>
						Скрипт для проверки и поддержки различных форм, которые используются в блоках DVD / каналов:
						рейтинг DVD / каналов, отправка комментария и др.
					</td>
				</tr>
				<tr>
					<td>KernelTeamVideoSharingForms.js</td>
					<td>
						Скрипт для проверки и поддержки различных форм, которые используются во внешних блоках сайта:
						формы логина, регистрации, приглашения друзей и др.
					</td>
				</tr>
				<tr>
					<td>KernelTeamVideoSharingMembers.js</td>
					<td>
						Скрипт для проверки и поддержки различных форм, которые связаны с пользовательской активностью
						на сайте: редактирование профиля, управление закладками, внутренняя почта, управление
						подписками и др.
					</td>
				</tr>
				<tr>
					<td>KernelTeamVideoSharingModelView.js</td>
					<td>
						Скрипт для проверки и поддержки различных форм, которые используются в блоках моделей: рейтинг
						моделей, отправка комментария и др.
					</td>
				</tr>
				 <tr>
					<td>KernelTeamVideoSharingSystem.js</td>
					<td>
						Системный скрипт, который подключается на всех страницах.
					</td>
				</tr>
				<tr>
					<td>KernelTeamVideoSharingVideoEdit.js</td>
					<td>
						Скрипт для проверки и поддержки формы загрузки / редактирования видео.
					</td>
				</tr>
				<tr>
					<td>KernelTeamVideoSharingVideoView.js</td>
					<td>
						Скрипт для проверки и поддержки различных форм, которые используются в блоках видео:
						рейтинг видео, добавление в избранное, отправка комментария и др.
					</td>
				</tr>
			</table>
		</div>
	</div>
	<!-- ch_website_ui_other_js(end) -->
	<!-- ch_website_ui_other_emails(start) -->
	<div>
		<h3 id="section_website_ui_other_emails">Системные email сообщения</h3>
		<p>
			Некоторые блоки сайта имеют функционал для отправки email сообщений различного содержания (например,
			отправка ссылки на сайт другу и др.). Текстовки и заголовки этих сообщений находятся в директории
			<b>emails</b> для каждого блока, который поддерживает отправку email сообщений. При необходимости эти файлы
			могут быть изменены вручную:
		</p>
		<p class="important">
			<b>Важно!</b> Все файлы писем сохранены в кодировке UTF8.
		</p>
		<div class="table">
			<table>
				<colgroup>
					<col width="15%"/>
					<col width="25%"/>
					<col/>
				</colgroup>
				<tr class="header">
					<td>Название блока</td>
					<td>Путь к email файлам</td>
					<td>Описание</td>
				</tr>
				<tr>
					<td>album_view</td>
					<td>/blocks/album_view/emails</td>
					<td>
						Блок поддерживает отправку другу ссылки на страницу с текущим фотоальбомом по email.
						Поддерживаются следующие токены:<br/>
						- <b>{{$smarty.ldelim}}$message{{$smarty.rdelim}}</b> - сообщение, которое пользователь ввел при отправке ссылки.<br/>
						- <b>{{$smarty.ldelim}}$link{{$smarty.rdelim}}</b> - ссылка на текущую страницу с фотоальбомом.<br/>
						- <b>{{$smarty.ldelim}}$project_name{{$smarty.rdelim}}</b> - название сайта, которое указывается при установке в файле
						<b>setup.php</b>.<br/>
						- <b>{{$smarty.ldelim}}$support_email{{$smarty.rdelim}}</b> - email адрес, который указывается при установке в файле
						<b>setup.php</b> и который будет указываться в поле From.<br/>
						- <b>{{$smarty.ldelim}}$project_licence_domain{{$smarty.rdelim}}</b> - домен сайта, который указывается при установке в файле
						<b>setup.php</b>.<br/>
					</td>
				</tr>
				<tr>
					<td>invite_friend</td>
					<td>/blocks/invite_friend/emails</td>
					<td>
						Блок поддерживает отправку другу ссылки на данный сайт. Поддерживаются следующие токены:<br/>
						- <b>{{$smarty.ldelim}}$message{{$smarty.rdelim}}</b> - сообщение, которое пользователь ввел при отправке ссылки.<br/>
						- <b>{{$smarty.ldelim}}$project_name{{$smarty.rdelim}}</b> - название сайта, которое указывается при установке в файле
						<b>setup.php</b>.<br/>
						- <b>{{$smarty.ldelim}}$support_email{{$smarty.rdelim}}</b> - email адрес, который указывается при установке в файле
						<b>setup.php</b> и который будет указываться в поле From.<br/>
						- <b>{{$smarty.ldelim}}$project_licence_domain{{$smarty.rdelim}}</b> - домен сайта, который указывается при установке в файле
						<b>setup.php</b>.<br/>
					</td>
				</tr>
				<tr>
					<td>logon</td>
					<td>/blocks/logon/emails</td>
					<td>
						Блок поддерживает отправку сообщений в случае временной блокировки пользователей.
						Поддерживаются следующие токены:<br/>
						- <b>{{$smarty.ldelim}}$link{{$smarty.rdelim}}</b> - ссылка для разблокировки.<br/>
						- <b>{{$smarty.ldelim}}$email{{$smarty.rdelim}}</b> - email адрес пользователя.<br/>
						- <b>{{$smarty.ldelim}}$username{{$smarty.rdelim}}</b> - имя пользователя (логин).<br/>
						- <b>{{$smarty.ldelim}}$pass{{$smarty.rdelim}}</b> - старый пароль пользователя, который был заблокирован.<br/>
						- <b>{{$smarty.ldelim}}$new_pass{{$smarty.rdelim}}</b> - новый сгенерированный пароль пользователя.<br/>
						- <b>{{$smarty.ldelim}}$project_name{{$smarty.rdelim}}</b> - название сайта, которое указывается при установке в файле
						<b>setup.php</b>.<br/>
						- <b>{{$smarty.ldelim}}$support_email{{$smarty.rdelim}}</b> - email адрес, который указывается при установке в файле
						<b>setup.php</b> и который будет указываться в поле From.<br/>
						- <b>{{$smarty.ldelim}}$project_licence_domain{{$smarty.rdelim}}</b> - домен сайта, который указывается при установке в файле
						<b>setup.php</b>.<br/>
					</td>
				</tr>
				<tr>
					<td>member_profile_edit</td>
					<td>/blocks/member_profile_edit/emails</td>
					<td>
						Блок поддерживает отправку пользователю email сообщения для подтверждения смены email адреса.
						Поддерживаются следующие токены:<br/>
						- <b>{{$smarty.ldelim}}$link{{$smarty.rdelim}}</b> - ссылка для подтверждения смены email адреса.<br/>
						- <b>{{$smarty.ldelim}}$email{{$smarty.rdelim}}</b> - новый email адрес пользователя.<br/>
						- <b>{{$smarty.ldelim}}$username{{$smarty.rdelim}}</b> - имя данного пользователя (логин).<br/>
						- <b>{{$smarty.ldelim}}$project_name{{$smarty.rdelim}}</b> - название сайта, которое указывается при установке в файле
						<b>setup.php</b>.<br/>
						- <b>{{$smarty.ldelim}}$support_email{{$smarty.rdelim}}</b> - email адрес, который указывается при установке в файле
						<b>setup.php</b> и который будет указываться в поле From.<br/>
						- <b>{{$smarty.ldelim}}$project_licence_domain{{$smarty.rdelim}}</b> - домен сайта, который указывается при установке в файле
						<b>setup.php</b>.<br/>
					</td>
				</tr>
				<tr>
					<td>signup</td>
					<td>/blocks/signup/emails</td>
					<td>
						Блок поддерживает отправку пользователю email сообщения для подтверждения регистрации, а также
						после восстановления пароля. Поддерживаются следующие токены:<br/>
						- <b>{{$smarty.ldelim}}$link{{$smarty.rdelim}}</b> - ссылка для подтверждения регистрации / сброса пароля.<br/>
						- <b>{{$smarty.ldelim}}$email{{$smarty.rdelim}}</b> - email адрес пользователя.<br/>
						- <b>{{$smarty.ldelim}}$username{{$smarty.rdelim}}</b> - имя данного пользователя (логин).<br/>
						- <b>{{$smarty.ldelim}}$pass{{$smarty.rdelim}}</b> - пароль пользователя при регистрации или новый (сгенерированный) пароль для
						пользователя в случае сброса пароля.<br/>
						- <b>{{$smarty.ldelim}}$project_name{{$smarty.rdelim}}</b> - название сайта, которое указывается при установке в файле
						<b>setup.php</b>.<br/>
						- <b>{{$smarty.ldelim}}$support_email{{$smarty.rdelim}}</b> - email адрес, который указывается при установке в файле
						<b>setup.php</b> и который будет указываться в поле From.<br/>
						- <b>{{$smarty.ldelim}}$project_licence_domain{{$smarty.rdelim}}</b> - домен сайта, который указывается при установке в файле
						<b>setup.php</b>.<br/>
					</td>
				</tr>
				<tr>
					<td>video_view</td>
					<td>/blocks/video_view/emails</td>
					<td>
						Блок поддерживает отправку другу ссылки на страницу с текущим видео по email. Поддерживаются
						следующие токены:<br/>
						- <b>{{$smarty.ldelim}}$message{{$smarty.rdelim}}</b> - сообщение, которое пользователь ввел при отправке ссылки.<br/>
						- <b>{{$smarty.ldelim}}$link{{$smarty.rdelim}}</b> - ссылка на текущую страницу с видео.<br/>
						- <b>{{$smarty.ldelim}}$project_name{{$smarty.rdelim}}</b> - название сайта, которое указывается при установке в файле
						<b>setup.php</b>.<br/>
						- <b>{{$smarty.ldelim}}$support_email{{$smarty.rdelim}}</b> - email адрес, который указывается при установке в файле
						<b>setup.php</b> и который будет указываться в поле From.<br/>
						- <b>{{$smarty.ldelim}}$project_licence_domain{{$smarty.rdelim}}</b> - домен сайта, который указывается при установке в файле
						<b>setup.php</b>.<br/>
					</td>
				</tr>
			</table>
		</div>
	</div>
	<!-- ch_website_ui_other_emails(end) -->
	<!-- ch_website_ui_other_session(start) -->
	<div>
		<h3 id="section_website_ui_other_session">Информация в сессии пользователя</h3>
		<p>
			Ниже приведен список полей сессии залогиненного пользователя, которые доступны в шаблонах сайта. Посмотреть
			актуальные значения всех данных сессии можно в отладчике страниц. Данные из сессии будут видны только если
			вы залогинены в зону сайта.
		</p>
		<p class="important">
			<b>Важно!</b> Переменные из сессии пользователя можно использовать только в шаблонах самих страниц, а
			также в шаблонах некоторых блоков (<b>video_view</b>, <b>video_comments</b>, <b>album_view</b>,
			<b>album_comments</b>, <b>album_images</b>, <b>dvd_view</b> и <b>dvd_comments</b>).
		</p>
		<div class="table">
			<table>
				<colgroup>
					<col width="10%"/>
					<col/>
				</colgroup>
				<tr class="header">
					<td>Имя переменной</td>
					<td>Описание</td>
				</tr>
				<tr>
					<td>$smarty.session.user_id</td>
					<td>
						Идентификатор пользователя. Если установлен - то пользователь залогинен. Если не установлен, то
						все параметры сессии будут пустыми. Пример использования:<br/>
						{{$smarty.ldelim}}if $smarty.session.user_id>0{{$smarty.rdelim}}<br/>
						&nbsp;&nbsp;&nbsp;&nbsp;пользователь залогинен<br/>
						{{$smarty.ldelim}}/if{{$smarty.rdelim}}
					</td>
				</tr>
				<tr>
					<td>$smarty.session.display_name</td>
					<td>
						Ник пользователя.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.username</td>
					<td>
						Логин пользователя.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.last_login_date</td>
					<td>
						Дата последнего входа пользователя в свою личную зону.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.added_date</td>
					<td>
						Дата регистрации пользователя.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.avatar</td>
					<td>
						Аватар пользователя. Это путь относительно директории <b>$config.content_url_avatars</b>:<br/>
						{{$smarty.ldelim}}$config.content_url_avatars{{$smarty.rdelim}}/{{$smarty.ldelim}}$smarty.session.avatar{{$smarty.rdelim}}
					</td>
				</tr>
				<tr>
					<td>$smarty.session.content_source_group_id</td>
					<td>
						Идентификатор группы контент провайдеров, если назначена пользователю.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.is_trusted</td>
					<td>
						Если пользователь доверенный (в настройках пользователя можно установить флаг), то данная
						переменная содержит значение <b>1</b>.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.unread_messages</td>
					<td>
						Количество непрочитанных сообщений внутренней почты. По умолчанию эта переменная не
						обновляется во время нахождения пользователя на сайте, поскольку ее вычисление приводит к
						нагрузке на базу данных. Чтобы включить ее обновление в реальном времени, вам необходимо
						включить опцию <span class="term">Синхронизировать новые сообщения пользователей</span> в
						настройках сайта.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.unread_invites</td>
					<td>
						Количество непрочитанных приглашений подружиться. По умолчанию эта переменная не обновляется во
						время нахождения пользователя на сайте (см. описание переменной
						<b>$smarty.session.unread_messages</b>).
					</td>
				</tr>
				<tr>
					<td>$smarty.session.unread_non_invites</td>
					<td>
						Количество непрочитанных сообщений, кроме приглашений подружиться (вычисляется как разница
						между значениями <b>$smarty.session.unread_messages</b> и
						<b>$smarty.session.unread_invites</b>). По умолчанию эта переменная не обновляется во время
						нахождения пользователя на сайте (см. описание переменной
						<b>$smarty.session.unread_messages</b>).
					</td>
				</tr>
				<tr>
					<td>$smarty.session.status_id</td>
					<td>
						Статус пользователя (2 - активный, 3 - премиум, 6 - вебмастер). Если вы используете платный
						доступ, то вам необходимо включить опцию синхронизации статуса пользователей, которая
						находится в настройках сайта. Эта опция необходима, чтобы у пользователя пропал доступ (по
						сути - поменялся статус в сессии), когда время доступа истекло.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.tokens_available</td>
					<td>
						Количество токенов, доступных пользователю. Если вы используете доступ по токенам, то вам
						необходимо включить опцию синхронизации статуса пользователей, которая находится в настройках
						сайта.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.paid_access_hours_left</td>
					<td>
						Эта переменная может использоваться только при включенной опции синхронизации статуса
						пользователей в настройках сайта. Она выставляется только для премиум пользователей и
						показывает сколько полных часов осталось до окончания действия их привилегированного статуса.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.paid_access_is_unlimited</td>
					<td>
						Эта переменная может использоваться только при включенной опции синхронизации статуса
						пользователей в настройках сайта. Она выставляется только для премиум пользователей и
						показывает, является ли действие их привилегированного статуса временным (=<b>0</b>), или
						безлимитным (=<b>1</b>).
					</td>
				</tr>
				<tr>
					<td>$smarty.session.external_package_id</td>
					<td>
						Эта переменная может использоваться только при включенной опции синхронизации статуса
						пользователей в настройках сайта. Она выставляется только для премиум пользователей и
						содержит внешний идентификатор выбранного пакета доступа. Вы можете использовать ее в шаблонах,
						если хотите отобразить разную информацию для пользователей, купивших разные пакеты.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.playlists</td>
					<td>
						Массив с плэйлистами пользователя. Структуру элементов массива вы можете посмотреть в отладчике
						страниц.
					</td>
				</tr>
				<tr>
					<td>$smarty.session.user_info</td>
					<td>
						Полные данные профиля пользователя. Структуру данных вы можете посмотреть в отладчике страниц.
					</td>
				</tr>
			</table>
		</div>
	</div>
	<!-- ch_website_ui_other_session(end) -->
	<!-- ch_website_ui_other_engine_customization(start) -->
	<div>
		<h3 id="section_website_ui_other_engine_customization">Подключение кастомного функционала к движку</h3>
		<p>
			При необходимости подключить кастомный функционал к движку обработки сайта вы можете редактировать
			несколько PHP файлов, которые вызываются в цикле обработки каждой страницы. Данные скрипты не подлежат
			обновлениям, соответственно ваши изменения не затрутся.
		</p>
		<div class="table">
			<table>
				<colgroup>
					<col width="30%"/>
					<col/>
					<col/>
					<col/>
				</colgroup>
				<tr class="header">
					<td>Путь к файлу</td>
					<td>Описание</td>
					<td>Типы запросов</td>
					<td>XML страницы</td>
				</tr>
				<tr>
					<td>/admin/include/pre_initialize_page_code.php</td>
					<td>
						Вызывается непосредственно перед началом обработки страницы. Может использоваться для замены
						HTTP параметров запроса, что также может влиять на кэширование.
					</td>
					<td>POST и GET</td>
					<td>Да</td>
				</tr>
				<tr>
					<td>/admin/include/pre_process_page_code.php</td>
					<td>
						Вызывается в начале обработки страницы. Вызов не зависит от того, кэшируется ли страница или
						нет. Заменять HTTP параметры в этом скрипте нельзя. Данный скрипт вызывается в том числе и для
						POST запросов, поэтому в нем нельзя подключать логику, которая выводит содержимое в поток
						вывода.
					</td>
					<td>POST и GET</td>
					<td>Нет</td>
				</tr>
				<tr>
					<td>/admin/include/pre_display_page_code.php</td>
					<td>
						Вызывается перед отображением содержимого страницы. Вызов не зависит от того, кэшируется ли
						страница или нет. Данный скрипт вызывается только для GET запросов. Здесь можно подключать
						сторонние скрипты, которые выводят содержимое в поток страницы (например, входящий трейд
						скрипт).
					</td>
					<td>GET</td>
					<td>Нет</td>
				</tr>
				<tr>
					<td>/admin/include/post_process_page_code.php</td>
					<td>
						Вызывается непосредственно после того как страница обработана и ее контент отправлен клиенту.
						Вызов не зависит от того, кэшируется ли страница или нет. Данный скрипт вызывается в том числе
						и для POST запросов.
					</td>
					<td>POST и GET</td>
					<td>Нет</td>
				</tr>
			</table>
		</div>
	</div>
	<!-- ch_website_ui_other_engine_customization(end) -->
	<!-- ch_website_ui_other_engine_custom_blocks(start) -->
	<div>
		<h3 id="section_website_ui_other_engine_custom_blocks">Создание кастомных блоков сайта</h3>
		<p>
			KVS предоставляет модульный движок сайта, в который вы можете добавлять свои блоки. Каждый блок имеет свой
			уникальный идентификатор (скорее это идентификатор типа блока) и все файлы этого блока должны находиться в
			директории <b>/blocks/%block_id%</b>, где <b>%block_id%</b> - это и есть идентификатор блока.
		</p>
		<p>
			Блок должен содержать 3 главных файла, а также файлы локализации:
		</p>
		<ul>
			<li>
				<span class="term">/blocks/%block_id%/%block_id%.php</span> - PHP файл блока, который содержит всю
				логику блока.
			</li>
			<li>
				<span class="term">/blocks/%block_id%/%block_id%.tpl</span> - шаблон блока по умолчанию. Этот шаблон
				используется только в качестве примера, поэтому вы можете создавать пустой шаблон.
			</li>
			<li>
				<span class="term">/blocks/%block_id%/%block_id%.dat</span> - метаданные о блоке в XML формате. Вы
				можете использовать такой шаблон для этого файла:
				<span class="code">
					&lt;block&gt;<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&lt;block_name&gt;Название блока&lt;/block_name&gt;<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&lt;author&gt;Автор блока&lt;/author&gt;<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;Версия блока (в любом формате)&lt;/version&gt;<br/>
					&lt;/block&gt;
				</span>
			</li>
			<li>
				<span class="term">/blocks/%block_id%/langs/english.php</span> - файл локализации текстовок блока по
				умолчанию.
			</li>
			<li>
				<span class="term">/blocks/%block_id%/langs/russian.php</span> - файл локализации текстовок блока для
				русского языка (этот файл необязательный).
			</li>
		</ul>
		<p>
			Основным файлом блока является, конечно же, PHP файл. Этот файл должен содержать набор функций со
			специальными названиями, которые вызываются движком сайта по мере необходимости. Кроме функций PHP файл
			блока также должен содержать такую строчку кода для отклика на механизм тестирования блоков:
		</p>
		<p class="code">
			if ($_SERVER['argv'][1]=='test' &amp;&amp; $_SERVER['DOCUMENT_ROOT']=='') {echo "OK";}
		</p>
		<p>
			Каждая функция блока должна иметь название, которое начинается с идентификатора блока, т.е.
			<b>%block_id%FunctionName</b>. Например <b>Show</b> функция для блока <b>list_videos</b> должна иметь
			название <b>list_videosShow</b>.
		</p>
		<p>
			Набор поддерживаемых функций таков:
		</p>
		<ul>
			<li>
				<span class="term">Show-функция (%block_id%Show, обязательна)</span> - вызывается движком в случае GET
				/ POST запросов на страницу, содержащую этот блок. В зависимости от типа запроса функция может либо
				сделать выборку данных и подготовить их к отображению, либо обработать отправленную пользователем форму
				в случае POST запроса. Show-функция вызывается только тогда, когда блок либо не поддерживает
				кэширование, либо кэш блока устарел и нужно заново выполнить полный цикл отображения блока. Функция
				принимает 2 параметра: <b>$block_config</b> - ассоциативный массив со всеми включенными параметрами
				конфигурации блока на этой странице и их значениями (ключом является название параметра), и
				<b>$object_id</b> - уникальный идентификатор блока на странице. Данные для отображения функция должна
				поместить в глобальный объект <b>$smarty</b>, который будет отображать шаблон этого блока. Данные,
				которые вы поместите в объект <b>$smarty</b> будут доступны только в шаблоне блока. Если вы хотите,
				чтобы к некоторым данным блока можно было обращаться из шаблона страницы, то их нужно поместить в
				глобальный объект <b>$storage</b>, положив в массив под ключом <b>$object_id</b>. Вот простой пример
				реализации этой функции:
				<span class="code">
					function my_blockShow($block_config,$object_id)<br/>
					{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;global $smarty,$storage;<br/>
					<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;$show_numbers_to=intval($block_config['show_numbers_to']); <span class="comment">// получаем из конфигурации блока настроенное там число N</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;$data=array();<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;for ($i=1;$i<=$show_numbers_to;$i++)<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[]=$i; <span class="comment">// создаем массив со всеми числами от 1 до N</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
					<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;$smarty->assign("data",$data); <span class="comment">// помещаем массив в глобальную переменную $smarty для отображения в шаблоне блока</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;$storage[$object_id]['total_count']=$show_numbers_to; <span class="comment">// помещаем общее кол-во элементов в $storage блока для отображения в шаблоне страницы</span><br/>
					}<br/>
				</span>
				Если ваш блок должен обрабатывать POST запросы, то делается это примерно таким образом:
				<span class="code">
					function my_blockShow($block_config,$object_id)<br/>
					{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;global $smarty,$storage;<br/>
					<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;if ($_POST['action']=='my_post_action')<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;здесь выполняется логика обработки формы<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header("Location: ?action=post_processed_successfully");die; <span class="comment">// завершаем обработку страницы и делаем редирект на эту же страницу</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
					<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;if ($_GET['action']=='post_processed_successfully')<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$smarty->assign("message","Your request has been processed"); <span class="comment">// помещаем успешное сообщение для отображения</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
					}<br/>
				</span>
				Делать редирект и завершать обработку страницы в Show-функции можно только при обработке POST запросов,
				поскольку во время POST запроса не используется кэширование блока. Если существует необходимость
				сделать редирект во время обработки GET запроса, то необходимо вернуть из Show-функции специальную
				строку, которая будет обработана движком с учетом всей специфики кэширования:
				<span class="code">
					function my_blockShow($block_config,$object_id)<br/>
					{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;global $smarty,$storage;<br/>
					<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;здесь выполняется логика обработки<br/>
					<br/>
					&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// сообщаем движку, что нужно сделать 301 редирект по урлу</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;return "status_301:http://url_to_redirect.com";<br/>
					<br/>
					&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// или сообщаем движку, что нужно сделать 302 редирект по урлу</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;return "status_302:http://url_to_redirect.com";<br/>
					}<br/>
				</span>
				Кроме этого, можно вернуть строку "status_404", если вы хотите, чтобы движок выдал 404 ошибку по
				странице с этим блоком.
			</li>
			<li>
				<span class="term">GetHash-функция (%block_id%GetHash, обязательна)</span> - предназначена для
				кэширования блока. Функция должна возвращать одинаковое строковое значение для запросов, по которым
				отображается одинаковый HTML код блока, и разное для тех запросов, по которым HTML блока будет
				отличаться. Функция принимает 1 параметр: <b>$block_config</b> - ассоциативный массив со всеми
				включенными параметрами конфигурации блока на этой странице и их значениями (ключом является название
				параметра). Как правило, возвращаемая строка должна содержать список всех значений, которые передаются
				блоку через параметры запроса, разделенных каким-то разделителем. Самый простой пример - блок списка с
				пагинацией, который должен возвращать разный хэш для разных страниц списка. Это делается следующим
				образом:
				<span class="code">
					function my_blockGetHash($block_config)<br/>
					{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;$from=intval($_REQUEST[$block_config['var_from']]); <span class="comment">// получаем из запроса переданное значение номера страницы, возможно пустое</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;$category=trim($_REQUEST[$block_config['var_category_dir']]); <span class="comment">// получаем из запроса переданное значение директории категории, возможно пустое</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;return "$from|$category"; <span class="comment">// возвращаем оба значения через разделитель, чтобы при разных переданных параметрах на выходе была разная строка</span><br/>
					}<br/>
				</span>
				Если блок вообще не должен кэшироваться, то вы можете вернуть системное значение <b>"nocache"</b>,
				которое будет означать запрет кэширования блока, а значит и запрет кэширования страницы с этим блоком.
			</li>
			<li>
				<span class="term">CacheControl-функция (%block_id%CacheControl, необязательна)</span> - предназначена
				для указания типа кэширования блока, что используется в панели администрирования для поиска
				потенциальных ошибок кэширования. Функция должна возвращать одну из строк: <b>"nocache"</b> - если блок
				не кэшируется, <b>"user_nocache"</b> - если блок не кэшируется только для залогиненных пользователей,
				<b>"user_specific"</b> - если блок кэшируется отдельно для каждого пользователя сайта,
				<b>"status_specific"</b> - если блок кэшируется отдельно для пользователей разных статусов, и
				<b>"default"</b> - если блок кэшируется стандартным образом. Функция принимает 1 параметр:
				<b>$block_config</b> - ассоциативный массив со всеми включенными параметрами конфигурации блока на этой
				странице и их значениями (ключом является название параметра). Пример функции:
				<span class="code">
					function my_blockCacheControl($block_config)<br/>
					{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;return "user_specific"; <span class="comment">// указываем что блок имеет разные варианты кэша для разных пользователей</span><br/>
					}<br/>
				</span>
			</li>
			<li>
				<span class="term">MetaData-функция (%block_id%MetaData, обязательна)</span> - предназначена для
				указания поддерживаемых блоком параметров конфигурации. Именно эти параметры и их значения, когда
				включены в настройках блока на странице, передаются другим функциям блока в виде ассоциативного массива
				(название_параметра => значение) в параметре <b>$block_config</b>. Вот пример реализации данной функции
				со всеми типами параметров:
				<span class="code">
					function my_blockMetaData()<br/>
					{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;return array(<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array("name"=>"integer_parameter", &nbsp;&nbsp;&nbsp;&nbsp;      "type"=>"INT", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                "is_required"=>1, "default_value"=>"10"),<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array("name"=>"string_parameter", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "type"=>"STRING", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                               "is_required"=>0, "default_value"=>""),<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array("name"=>"checkbox_parameter", &nbsp;&nbsp;&nbsp;           "type"=>"", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "is_required"=>0),<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array("name"=>"integer_list_parameter",                          "type"=>"INT_LIST", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                                         "is_required"=>0, "default_value"=>""),<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array("name"=>"combobox_parameter",&nbsp;&nbsp;&nbsp;&nbsp;      "type"=>"CHOICE[1,2,3]", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                                                                  "is_required"=>0, "default_value"=>"1"),<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array("name"=>"sorting_parameter", &nbsp;&nbsp;&nbsp;&nbsp;      "type"=>"SORTING[field1,field2]",                                                                                                          "is_required"=>1, "default_value"=>"field1"),<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
					}<br/>
				</span>
			</li>
			<li>
				<span class="term">Javascript-функция (%block_id%Javascript, необязательна)</span> - функция
				предназначена для указания, какой JavaScript файл требуется для работы данного блока. Функция принимает
				1 параметр: <b>$block_config</b> - ассоциативный массив со всеми включенными параметрами конфигурации
				блока на этой странице и их значениями (ключом является название параметра). Функция должна вернуть
				название JavaScript файла относительно директории /js/ в корне проекта, т.е. по сути просто название
				файла без каких-либо путей к нему. Если функция отсутствует, то считается, что блоку не требуется
				JavaScript. Пример реализации функции:
				<span class="code">
					function my_blockJavascript()<br/>
					{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;return "MyBlockJavaScript.js";<br/>
					}<br/>
				</span>
			</li>
			<li>
				<span class="term">Async-функция (%block_id%Async, необязательна)</span> - функция предназначена
				для обработки асинхронных запросов на страницу (запросы, которые сделаны с параметром ?mode=async).
				Функция принимает 1 параметр: <b>$block_config</b> - ассоциативный массив со всеми включенными
				параметрами конфигурации блока на этой странице и их значениями (ключом является название параметра).
				При получении асинхронного запроса движок не вызывает функции Show блоков страницы, а вызывает функции
				Async у тех блоков на странице, у которых они определены. Любой блок может обработать пришедший в
				функцию Async запрос и выдать результат, после чего завершить выполнение движка:
				<span class="code">
					function my_blockAsync($block_config)<br/>
					{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;if ($_REQUEST['action']=='my_async_action')<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;здесь выполняется логика обработки<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo "processed";die; <span class="comment">// завершаем обработку страницы и выводим результат прямо в поток</span><br/>
					&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
					}<br/>
				</span>
			</li>
			<li>
				<span class="term">PreProcess-функция (%block_id%PreProcess, необязательна)</span> - функция
				предназначена для тех случаев, когда какой-то код в блоке должен выполняться независимо от того,
				закэширован ли блок или нет. В отличие от Show-функции, которая не вызывается при каждом обращении к
				странице с данным блоком (частота вызова Show-функции зависит от методики кэширования блока),
				PreProcess-функция вызывается всегда. Исходя из этого PreProcess-функция должна содержать только
				быстровыполняемый код и не использовать никаких подключений к базе данных. Основное назначение данной
				функции - запись статистики. Например, PreProcess-функция блока <b>video_view</b> записывает в
				статистику каждый свой вызов, что потом аккумулируется в качестве статистики просмотров видео. Функция
				принимает 2 параметра: <b>$block_config</b> - ассоциативный массив со всеми включенными параметрами
				конфигурации блока на этой странице и их значениями (ключом является название параметра), и
				<b>$object_id</b> - уникальный идентификатор блока на странице.
			</li>
		</ul>
		<p>
			Файл локализации блока должен предоставлять базовые описания, а также описание всех параметров конфигурации
			и названия значений для параметров типа CHOICE и SORTING, которые задаются MetaData-функцией. Вот пример
			типового файла локализации:
		</p>
		<p class="code">
			$lang['%block_id%']['block_short_desc'] = "Краткое описание блока";<br/>
			$lang['%block_id%']['block_desc'] = "Полное описание блока";<br/>
			$lang['%block_id%']['params']['integer_parameter'] = "Описание параметра integer_parameter";<br/>
			$lang['%block_id%']['params']['string_parameter'] = "Описание параметра string_parameter";<br/>
			$lang['%block_id%']['params']['checkbox_parameter'] = "Описание параметра checkbox_parameter";<br/>
			$lang['%block_id%']['params']['integer_list_parameter'] = "Описание параметра integer_list_parameter";<br/>
			$lang['%block_id%']['params']['combobox_parameter'] = "Описание параметра combobox_parameter";<br/>
			$lang['%block_id%']['params']['sorting_parameter'] = "Описание параметра sorting_parameter";<br/>
			$lang['%block_id%']['values']['combobox_parameter']['1'] = "Название опции 1 параметра combobox_parameter";<br/>
			$lang['%block_id%']['values']['combobox_parameter']['2'] = "Название опции 2 параметра combobox_parameter";<br/>
			$lang['%block_id%']['values']['combobox_parameter']['3'] = "Название опции 3 параметра combobox_parameter";<br/>
			$lang['%block_id%']['values']['sorting_parameter']['field1'] = "Название опции field1 параметра sorting_parameter";<br/>
			$lang['%block_id%']['values']['sorting_parameter']['field2'] = "Название опции field2 параметра sorting_parameter";<br/>
			$lang['%block_id%']['values']['sorting_parameter']['rand()'] = "Название опции rand() параметра sorting_parameter";<br/>
		</p>
	</div>
	<!-- ch_website_ui_other_engine_custom_blocks(end) -->
	<!-- ch_website_ui_other_debugger(start) -->
	<div>
		<h3 id="section_website_ui_other_debugger">Отладка страниц сайта</h3>
		<p>
			Для того, чтобы заметно упростить разработку и кастомизацию сайта, KVS предоставляет "отладчик" страниц,
			который может помочь вам быстро и без детального разбора документации внести как небольшие коррективы
			в уже заданные шаблоны, так и полностью создавать новые страницы под ваши нужды. Отладчик может быть
			запущен для любой страницы сайта и что самое главное - отладчик показывает детали и данные именно той
			страницы, которую вы видите на экране в настоящий момент.
		</p>
		<p class="important">
			<b>Важно!</b> Доступ к отладчику страниц доступен только если вы залогинены в панель администрирования.
		</p>
		<p>
			Для того, чтобы открыть отладчик страницы сайта, на которой вы в данный момент находитесь, вам необходимо
			к адресу страницы добавить HTTP параметр <b>debug=true</b>, после чего KVS выведет всю отладочную
			информацию по текущей странице:
		</p>
		<p class="code">
			http://domain.com/videos/123/video/?debug=true
		</p>
		<p>
			Отладчик отображает следующие отладочные данные по странице:
		</p>
		<ul>
			<li>
				<span class="term">ID страницы</span> - идентификатор текущей страницы.
			</li>
			<li>
				<span class="term">Название</span> - название текущей страницы и ссылка на ее редактирование.
			</li>
			<li>
				<span class="term">Отдача XML</span> - отдает ли текущая страница данные в XML формате.
			</li>
			<li>
				<span class="term">Локаль</span> - если текущая страница отображается в нестандартной локали,
				показывается локаль.
			</li>
			<li>
				<span class="term">Компоненты страниц, используемые в шаблоне страницы</span> - список компонентов
				страниц, которые используются в шаблоне текущей страницы сайта, и ссылки на их редактирование.
			</li>
			<li>
				<span class="term">URI запроса</span> - часть адреса запроса, которая находится после доменного имени
				(эта часть адреса участвует в правилах mod_rewrite).
			</li>
			<li>
				<span class="term">Параметры HTTP</span> - список HTTP параметров, которые передаются на страницу (они
				могут передаваться как через URI запроса, так и подставляться из правил mod_rewrite).
			</li>
			<li>
				<span class="term">Значения в сессии</span> - значения в сессии пользователя, если вы залогинены в
				зону пользователя на сайте.
			</li>
			<li>
				<span class="term">Динамические HTTP параметры</span> - значения динамических параметров.
			</li>
		</ul>
		<p>
			По каждому блоку, который присутствует на странице, отладчик отображает следующие данные:
		</p>
		<ul>
			<li>
				<span class="term">Название блока</span> - название блока на текущей странице и ссылка на его
				редактирование.
			</li>
			<li>
				<span class="term">Тип блока</span> - тип блока и ссылка на детальное описание типа блока.
			</li>
			<li>
				<span class="term">Ключ storage</span> - ключ глобальной переменной <b>$storage</b> для указанного
				блока на текущей странице.
			</li>
			<li>
				<span class="term">Параметры конфигурации блока</span> - перечисляются все включенные параметры
				конфигурации блока и их значения. Для <b>var</b>-параметров (параметры, которые ссылаются на HTTP
				параметры запроса) в скобках показываются соответствующие им значения HTTP параметров запроса, если
				в запросе найдено соответствие.
			</li>
			<li>
				<span class="term">Компоненты страниц, используемые в шаблоне блока</span> - список компонентов
				страниц, которые используются в шаблоне указанного блока на текущей странице, и ссылки на их
				редактирование.
			</li>
			<li>
				<span class="term">Данные блока в хранилище storage</span> - набор всех данных, которые содержатся в
				хранилище <b>$storage</b> блока и доступны для использования в шаблоне текущей страницы сайта
				(данные из <b>$storage</b> могут использоваться только после места вставки блока в шаблоне страницы).
			</li>
			<li>
				<span class="term">Переменные в шаблоне блока</span> - набор всех переменных, которые доступны для
				использования в шаблоне указанного блока на текущей странице и их актуальные значения.
			</li>
		</ul>
		<p>
			Пример использования любой переменной:
		</p>
		<p class="code">
			<span class="comment">// вывод ID видео из storage блока video_view в шаблоне страницы сайта</span><br/>
			{{$smarty.ldelim}}$storage.video_view_video_view.video_id{{$smarty.rdelim}}<br/><br/>

			<span class="comment">// вывод ID видео в шаблоне блока video_view</span><br/>
			{{$smarty.ldelim}}$data.video_id{{$smarty.rdelim}}
		</p>
		<p>
			Для итерации по переменной-массиву следует использовать конструкцию {{$smarty.ldelim}}foreach{{$smarty.rdelim}}:
		</p>
		<p class="code">
			{{$smarty.ldelim}}foreach name=data item=<b>item</b> from=$storage.video_view_video_view.tags{{$smarty.rdelim}}<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">{{$smarty.ldelim}}* Обращение к элементу массива идет через переменную $item *{{$smarty.rdelim}}</span><br/>
			&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}<b>$item</b>.tag_id{{$smarty.rdelim}}<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}<b>$item</b>.tag{{$smarty.rdelim}}<br/>
			{{$smarty.ldelim}}/foreach{{$smarty.rdelim}}<br/>
		</p>
		<p>
			Обратите внимание, что если у вас уже есть один цикл {{$smarty.ldelim}}foreach{{$smarty.rdelim}} (например, по списку видео), и внутри него
			вы хотите добавить еще один цикл (например, вывести категории для каждого видео в списке), то вам
			необходимо использовать другое название для переменных item и name:
		</p>
		<p class="code">
			{{$smarty.ldelim}}foreach name=<b>data</b> item=<b>item</b> from=<b>$data</b>{{$smarty.rdelim}}<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">{{$smarty.ldelim}}* Обращение к элементу основного массива идет через переменную $item *{{$smarty.rdelim}}</span><br/>
			&nbsp;&nbsp;&nbsp;&nbsp;Название: {{$smarty.ldelim}}<b>$item</b>.title{{$smarty.rdelim}}<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;Категории:<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">{{$smarty.ldelim}}* Внутренний цикл по категориям, список категорий доступен в переменной $item.categories *{{$smarty.rdelim}}</span><br/>
			&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}foreach name=<b>data_inner</b> item=<b>item_inner</b> from=<b>$item.categories</b>{{$smarty.rdelim}}<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">{{$smarty.ldelim}}* Обращение к элементу внутреннего массива идет через переменную $item_inner *{{$smarty.rdelim}}</span><br/>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}<b>$item_inner.title</b>{{$smarty.rdelim}},<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;{{$smarty.ldelim}}/foreach{{$smarty.rdelim}}<br/>
			{{$smarty.ldelim}}/foreach{{$smarty.rdelim}}<br/>
		</p>
	</div>
	<!-- ch_website_ui_other_debugger(end) -->
</div>